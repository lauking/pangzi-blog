<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[胖浩网]]></title>
  <subtitle><![CDATA[做一个有知识，有文化、有技术、有内涵、有梦想的人]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.haozi520.com/"/>
  <updated>2014-09-02T11:12:20.506Z</updated>
  <id>http://www.haozi520.com/</id>
  
  <author>
    <name><![CDATA[lauking]]></name>
    <email><![CDATA[lauking1001@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MySQL时间函数整理]]></title>
    <link href="http://www.haozi520.com/2014/08/30/mysql-date-function/"/>
    <id>http://www.haozi520.com/2014/08/30/mysql-date-function/</id>
    <published>2014-08-30T09:37:12.000Z</published>
    <updated>2014-09-02T11:09:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Mysql_获得当前日期时间">Mysql 获得当前日期时间</h3>
<p><strong>Now()</strong> : 获得当前的 日期+ 时间（date + time ）函数：</p>
<pre><code><span class="header">mysql&gt; select now();
+---------------------+</span>
<span class="header">| now()               |
+---------------------+</span>
<span class="header">| 2011-03-01 10:26:23 |
+---------------------+</span>
1 row in set (0.00 sec)
</code></pre><p>同等的函数还包括current_timestamp(),localtime() ，但是now() 最容易记忆，所以推荐使用。</p>
<p><strong>Sysdate()</strong> : 日期时间函数跟 now() 类似，不同之处在于：now() 在执行开始时值就得到了， sysdate() 在函数执行时动态得到值。</p>
<p>看下面的例子就明白了：</p>
<pre><code>mysql&gt; select now(),sleep(3),now();

<span class="code">+---------------------+</span>----------<span class="code">+---------------------+</span>
<span class="header">| now()               | sleep(3) | now()               |
+---------------------+----------+---------------------+</span>
<span class="header">| 2011-03-01 10:51:43 |        0 | 2011-03-01 10:51:43 |
+---------------------+----------+---------------------+</span>
1 row in set (3.02 sec)
<span class="header">mysql&gt; select sysdate(),sleep(3),sysdate();
+---------------------+----------+---------------------+</span>
<span class="header">| sysdate()           | sleep(3) | sysdate()           |
+---------------------+----------+---------------------+</span>
<span class="header">| 2011-03-01 10:52:09 |        0 | 2011-03-01 10:52:12 |
+---------------------+----------+---------------------+</span>
1 row in set (3.00 sec)
</code></pre><p>可以看到，虽然中途 sleep 3 秒，但 now() 函数两次的时间值是相同的； sysdate() 函数两次得到的时间值相差 3 秒</p>
<p><strong>也可以只取当前日期或者当前时间</strong><br><strong>Curdate()</strong>: 获得当前日期</p>
<pre><code><span class="header">mysql&gt; select curdate();
+------------+</span>
<span class="header">| curdate()  |
+------------+</span>
<span class="header">| 2011-03-01 |
+------------+</span>
1 row in set (0.01 sec)
</code></pre><p><strong>Curtime()</strong>：获得当前时间（time ）函数</p>
<pre><code><span class="header">mysql&gt; select curtime();
+-----------+</span>
<span class="header">| curtime() |
+-----------+</span>
<span class="header">| 10:55:12  |
+-----------+</span>
1 row in set (0.00 sec)
</code></pre><h3 id="Mysql日期时间的抽取">Mysql日期时间的抽取</h3>
<p>通过这一功能，我们可以从一个时间中抽取自己想要的部分，例如</p>
<pre><code>mysql&gt; <span class="built_in">set</span> @ct=<span class="string">'2011-03-01 11:16:14.123456'</span>; 
Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> <span class="built_in">sec</span>)
</code></pre><p>设置变量ct 为某一时间值，精确到微妙<br><strong>获取其日期值</strong>：</p>
<pre><code><span class="header">mysql&gt; select date(@ct);
+------------+</span>
<span class="header">| date(@ct)  |
+------------+</span>
<span class="header">| 2011-03-01 |
+------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>查看此日期所属季度</strong></p>
<pre><code><span class="header">mysql&gt; select quarter(@ct);
+--------------+</span>
<span class="header">| quarter(@ct) |
+--------------+</span>
<span class="header">|            1 |
+--------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>查看此日期属于当年哪一周</strong></p>
<pre><code><span class="header">mysql&gt; select week(@ct);
+-----------+</span>
<span class="header">| week(@ct) |
+-----------+</span>
<span class="header">|         9 |
+-----------+</span>
1 row in set (0.00 sec)
</code></pre><p>另外还有year(),day(),hour(),minute(),second() 等，在此不一一赘述。</p>
<p>采用extract() ，也可以实现类似的功能，语法格式为extract(year from @ct) ，<br>不足之处在于需要多敲几次键盘</p>
<h3 id="Dayof_函数">Dayof 函数</h3>
<p>Dayofweek(),dayofmonth(),dayofyear() 分别返回日期再一周、一月以及一年中的位置</p>
<pre><code><span class="header">mysql&gt; select dayofweek(@ct);
+----------------+</span>
<span class="header">| dayofweek(@ct) |
+----------------+</span>
<span class="header">|              3 |
+----------------+</span>
1 row in set (0.00 sec)
</code></pre><p>注意：其实3 月1 号是星期二，但是返回数字3 ，因为是从Sunday 开始算起的(1=Sunday,2=Monday, …)</p>
<pre><code><span class="header">mysql&gt; select dayofmonth(@ct);
+-----------------+</span>
<span class="header">| dayofmonth(@ct) |
+-----------------+</span>
<span class="header">|               1 |
+-----------------+</span>
1 row in set (0.00 sec)

<span class="header">mysql&gt; select dayofyear(@ct);
+----------------+</span>
<span class="header">| dayofyear(@ct) |
+----------------+</span>
<span class="header">|             60 |
+----------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>weekofyear()</strong>:查看日期属于当年的第几周</p>
<pre><code><span class="header">mysql&gt; select weekofyear(@ct);
+-----------------+</span>
<span class="header">| weekofyear(@ct) |
+-----------------+</span>
<span class="header">|               9 |
+-----------------+</span>
1 row in set (0.00 sec)
</code></pre><h3 id="返回星期名和月份名的函数">返回星期名和月份名的函数</h3>
<p><strong>Dayname()</strong>： 计算日期是星期几</p>
<pre><code><span class="header">mysql&gt; select dayname(@ct);
+--------------+</span>
<span class="header">| dayname(@ct) |
+--------------+</span>
<span class="header">| Tuesday      |
+--------------+</span>
1 row in set (0.02 sec)
</code></pre><p><strong>Monthname()</strong>:计算日期是哪一月</p>
<pre><code><span class="header">mysql&gt; select monthname(@ct);
+----------------+</span>
<span class="header">| monthname(@ct) |
+----------------+</span>
<span class="header">| March          |
+----------------+</span>
1 row in set (0.00 sec)
</code></pre><h3 id="月份中最后一天">月份中最后一天</h3>
<p><strong>Last_day()</strong> : 返回月份中最后一天</p>
<pre><code><span class="header">mysql&gt; select now();
+---------------------+</span>
<span class="header">| now()               |
+---------------------+</span>
<span class="header">| 2011-03-01 13:15:00 |
+---------------------+</span>
1 row in set (0.00 sec)

<span class="header">mysql&gt; select last_day(now());
+-----------------+</span>
<span class="header">| last_day(now()) |
+-----------------+</span>
<span class="header">| 2011-03-31      |
+-----------------+</span>
1 row in set (0.00 sec)
</code></pre><p>通过该函数，可以计算出当前月份有多少天</p>
<pre><code><span class="header">mysql&gt; select now(),day(last_day(now())) ;
+---------------------+----------------------+</span>
<span class="header">| now()               | day(last_day(now())) |
+---------------------+----------------------+</span>
<span class="header">| 2011-03-01 13:17:12 |                   31 |
+---------------------+----------------------+</span>
1 row in set (0.00 sec)
</code></pre><h3 id="Mysql_的日期时间计算函数">Mysql 的日期时间计算函数</h3>
<p>Date_add() : 为日期增加一个时间间隔</p>
<p>具体语法为date_add(@ct, interval num year/quarter/month/week/day/hour/minute/secont/microsecond);</p>
<p>注意: 此函数并不改变变量@ct 的实际值</p>
<pre><code>mysql&gt; set @ct=now();
Query OK, 0 rows affected (0.00 sec)
<span class="header">mysql&gt; select @ct;
+---------------------+</span>
<span class="header">| @ct                 |
+---------------------+</span>
<span class="header">| 2011-03-01 15:09:16 |
+---------------------+</span>
1 row in set (0.00 sec)
<span class="header">mysql&gt; select date_add(@ct,interval 1 day);
+------------------------------+</span>
<span class="header">| date_add(@ct,interval 1 day) |
+------------------------------+</span>
<span class="header">| 2011-03-02 15:09:16          |
+------------------------------+</span>
1 row in set (0.00 sec)
<span class="header">mysql&gt; select @ct;
+---------------------+</span>
<span class="header">| @ct                 |
+---------------------+</span>
<span class="header">| 2011-03-01 15:09:16 |
+---------------------+</span>
1 row in set (0.00 sec)
<span class="header">mysql&gt; select date_add(@ct,interval 1 week);
+-------------------------------+</span>
<span class="header">| date_add(@ct,interval 1 week) |
+-------------------------------+</span>
<span class="header">| 2011-03-08 15:09:16           |
+-------------------------------+</span>
1 row in set (0.00 sec)
</code></pre><p>类似功能还有adddate(),addtime() 等函数，与之相对应的是date_sub() ，顾名思义就是日期减法<br>另类日期函数</p>
<p><strong>Period_add(P,N)</strong>: 日期加/ 减去N 月，其中P 的格式应为yyyymm 或yymm<br><strong>Period_diff(P1,P2)</strong>: 日期p1-p2 ，返回N 个月</p>
<pre><code><span class="header">mysql&gt; select period_add(201103,2),period_add(201103,-2) ;
+----------------------+-----------------------+</span>
<span class="header">| period_add(201103,2) | period_add(201103,-2) |
+----------------------+-----------------------+</span>
<span class="header">|               201105 |                201101 |
+----------------------+-----------------------+</span>
1 row in set (0.00 sec)

<span class="header">mysql&gt; select period_diff('201103','201101');
+--------------------------------+</span>
<span class="header">| period_diff('201103','201101') |
+--------------------------------+</span>
<span class="header">|                              2 |
+--------------------------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>日期时间相减函数</strong><br><strong>Datediff(date1,date2)</strong> : 两个日期date1-date2</p>
<pre><code><span class="header">mysql&gt; select datediff('2011-03-09','2011-03-01');
+-------------------------------------+</span>
<span class="header">| datediff('2011-03-09','2011-03-01') |
+-------------------------------------+</span>
<span class="header">|                                   8 |
+-------------------------------------+</span>
1 row in set (0.00 sec)

<span class="header">mysql&gt; select datediff('2011-03-01','2011-03-09');
+-------------------------------------+</span>
<span class="header">| datediff('2011-03-01','2011-03-09') |
+-------------------------------------+</span>
<span class="header">|                                  -8 |
+-------------------------------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>Timediff(time1,time2)</strong> : 两个时间相减</p>
<pre><code><span class="header">mysql&gt; select timediff('2011-03-03 15:33:00','2011-03-02 15:33:59');
+-------------------------------------------------------+</span>
<span class="header">| timediff('2011-03-03 15:33:00','2011-03-02 15:33:59') |
+-------------------------------------------------------+</span>
<span class="header">| 23:59:01                                              |
+-------------------------------------------------------+</span>
1 row in set (0.00 sec)
<span class="header">mysql&gt; select timediff('15:33:00','15:33:59');
+---------------------------------+</span>
<span class="header">| timediff('15:33:00','15:33:59') |
+---------------------------------+</span>
<span class="header">| -00:00:59                       |
+---------------------------------+</span>
1 row in set (0.00 sec)
</code></pre><h3 id="MySql_日期、时间转换函数">MySql 日期、时间转换函数</h3>
<p><strong>Time_to_sec(time)</strong> : 时间—&gt; 秒 转换函数<br><strong>Sec_to_time(num)</strong> : 秒—&gt; 时间 转换函数</p>
<pre><code><span class="header">mysql&gt; select time_to_sec('01:00:00');
+-------------------------+</span>
<span class="header">| time_to_sec('01:00:00') |
+-------------------------+</span>
<span class="header">|                    3600 |
+-------------------------+</span>
1 row in set (0.00 sec)
<span class="header">mysql&gt; select sec_to_time(3600);
+-------------------+</span>
<span class="header">| sec_to_time(3600) |
+-------------------+</span>
<span class="header">| 01:00:00          |
+-------------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>To_days(date)</strong> : 日期—&gt; 天 转换函数 起始日期为0000-00-00<br><strong>From_days(num)</strong> : 天—&gt; 日期 将数字转换为具体的日期</p>
<pre><code><span class="header">mysql&gt; select to_days('2011-03-01');
+-----------------------+</span>
<span class="header">| to_days('2011-03-01') |
+-----------------------+</span>
<span class="header">|                734562 |
+-----------------------+</span>
1 row in set (0.00 sec) 
<span class="header">mysql&gt; select from_days(734562);
+-------------------+</span>
<span class="header">| from_days(734562) |
+-------------------+</span>
<span class="header">| 2011-03-01        |
+-------------------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>Str_to_date(str,date)</strong>: 字符串—&gt; 日期 转换函数<br>可以将一些杂乱无章的字符转换为日期格式</p>
<pre><code><span class="header">mysql&gt; select str_to_date('01.03.2011', '%m.%d.%Y');
+---------------------------------------+</span>
<span class="header">| str_to_date('01.03.2011', '%m.%d.%Y') |
+---------------------------------------+</span>
<span class="header">| 2011-01-03                            |
+---------------------------------------+</span>
1 row in set (0.00 sec)

<span class="header">mysql&gt; select str_to_date('01/03/2011', '%m/%d/%Y');
+---------------------------------------+</span>
<span class="header">| str_to_date('01/03/2011', '%m/%d/%Y') |
+---------------------------------------+</span>
<span class="header">| 2011-01-03                            |
+---------------------------------------+</span>
1 row in set (0.00 sec)
</code></pre><h3 id="小练习：">小练习：</h3>
<p>以表centralmobile_logs 为例，目前该表总共有270 多万条数据</p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs;
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|  2725403 |
+----------+</span>
1 row in set (0.00 sec)
</code></pre><p><strong>现在对其做一些统计</strong><br><strong>查询过去30 天总共有多少数据</strong></p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs where to_days(curdate())- to_days(create_time)&lt;=30;
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|  2367518 |
+----------+</span>
1 row in set (3.38 sec)
<span class="header">mysql&gt; select count(*) from centralmobile_logs where datediff(curdate(),create_time) &lt;=30;
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|  2367518 |
+----------+</span>
1 row in set (3.29 sec)
</code></pre><p><strong>查看每月第一天的数据</strong></p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs where dayofmonth(create_time)=1;
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|   161293 |
+----------+</span>
1 row in set (3.14 sec)
</code></pre><p><strong>查看11 年1 月31 日之前的数据</strong></p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs where create_time &lt;='2011-01-31 00:00:00';
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|   413797 |
+----------+</span>
1 row in set (0.17 sec)
</code></pre><p><strong>查看11 年整个二月份的数据</strong></p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs where monthname(create_time)='February' and year(create_time)=2011;
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|  2149284 |
+----------+</span>
1 row in set (3.94 sec)
</code></pre><p><strong>查看11 年每个周日的累积数据</strong></p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs where dayname(create_time)='Sunday' and year(create_time)=2011;
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|   479033 |
+----------+</span>
1 row in set (3.88 sec)
</code></pre><p><strong>查看每天零点时分插入的数据总和</strong></p>
<pre><code><span class="header">mysql&gt; select count(*) from centralmobile_logs where time(create_time)='00:00:00';
+----------+</span>
<span class="header">| count(*) |
+----------+</span>
<span class="header">|       37 |
+----------+</span>
1 row in set (3.99 sec)
</code></pre>]]></content>
    
    
      <category term="mysql" scheme="http://www.haozi520.com/tags/mysql/"/>
    
      <category term="时间函数" scheme="http://www.haozi520.com/tags/%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0/"/>
    
      <category term="时间转换" scheme="http://www.haozi520.com/tags/%E6%97%B6%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="mysql" scheme="http://www.haozi520.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL建立唯一索引去重失效]]></title>
    <link href="http://www.haozi520.com/2014/08/30/mysql-alert-ignore-index/"/>
    <id>http://www.haozi520.com/2014/08/30/mysql-alert-ignore-index/</id>
    <published>2014-08-30T09:37:12.000Z</published>
    <updated>2014-08-30T10:00:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="建立唯一索引">建立唯一索引</h3>
<p>数据库在处理重复数据时经常会用到建立字段的唯一索引或联合索引</p>
<pre><code>例如，user表中有user_id,user_name两个字段，如果不希望有两条一摸一样的的user_id和user_name，我们可以给user表添加两个字段的联合唯一索引：
<span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">unique</span> index(user_id,user_name);</span>
这样当向表中添加相同记录的时候，会返回1062的添加失败信息。
但是有一种情况是表中已经有n个重复的记录，这时候我们才想起来要添加唯一索引，再执行上面的操作时，数据库会告诉你已经有重复的记录了，建立索引失败，这时候，我们可以用下面的操作：
<span class="operator"><span class="keyword">alter</span> ignore <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">unique</span> index(user_id,user_name);</span>
它会删除重复的记录（别怕，会保留一条），然后建立唯一索引，高效而且人性化。
</code></pre><h3 id="问题">问题</h3>
<p>在5.1版本中在5.1版本时创建唯一去重索引是会失效，网上说有人提交了bug，而mysql官方并没有对此进行快速修改，直到5.6版本才修正此bug。只好用临时方案解决此bug。就是在执行创建唯一去重索引语句前现执行：</p>
<pre><code>mysql&gt;<span class="built_in">set</span> session old_alter_table =<span class="command"><span class="keyword">on</span>;</span>
</code></pre><p>然后在执行创建唯一去重索引语句<br>关闭命令窗口后此次设置的session old_alter_table =on; 将失效</p>
]]></content>
    
    
      <category term="mysql" scheme="http://www.haozi520.com/tags/mysql/"/>
    
      <category term="索引" scheme="http://www.haozi520.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="去重" scheme="http://www.haozi520.com/tags/%E5%8E%BB%E9%87%8D/"/>
    
      <category term="mysql" scheme="http://www.haozi520.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这是你要的jQuery插件开发吗？]]></title>
    <link href="http://www.haozi520.com/2014/06/18/js-jquery-plugin-dev/"/>
    <id>http://www.haozi520.com/2014/06/18/js-jquery-plugin-dev/</id>
    <published>2014-06-18T14:21:00.000Z</published>
    <updated>2014-06-18T14:30:23.000Z</updated>
    <content type="html"><![CDATA[<p>所谓“插件”，就是用户自己新增的jQuery实例对象的方法。由于该方法要被所有实例共享，所以只能定义在jQuery构造函数的原型对象（prototype）之上。对于用户来说，把一些常用的操作封装成插件（plugin），使用起来会非常方便。</p>
<h3 id="插件的编写">插件的编写</h3>
<p>本质上，jQuery插件是定义在jQuery构造函数的prototype对象上面的一个方法，这样做就能使得所有jQuery对象的实例都能共 享这个方法。因为jQuery构造函数的prototype对象被简写成jQuery.fn对象，所以插件采用下面的方法定义。</p>
<pre><code>jQuery.fn.myPlugin = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
  <span class="comment">// Do your awesome plugin stuff here</span>
};
</code></pre><p>更好的做法是采用下面的写法，这样就能在函数体内自由使用美元符号（$）。</p>
<pre><code>;(<span class="function"><span class="keyword">function</span> <span class="params">($)</span>{</span>
  $.fn.myPlugin = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
    <span class="comment">// Do your awesome plugin stuff here</span>
  };
})(jQuery);
</code></pre><p>上面代码的最前面有一个分号，这是为了防止多个脚本文件合并时，其他脚本的结尾语句没有添加分号，造成运行时错误。<br>有时，还可以把顶层对象（window）作为参数输入，这样可以加快代码的执行速度和执行更有效的最小化操作。</p>
<pre><code>;(<span class="function"><span class="keyword">function</span> <span class="params">($, window)</span> {</span>
  $.fn.myPlugin = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="comment">// Do your awesome plugin stuff here</span>
  };
}(jQuery, window));
</code></pre><p>需要注意的是，在插件内部，this关键字指的是jQuery对象的实例。而在一般的jQuery回调函数之中，this关键字指的是DOM对象。</p>
<pre><code><span class="list">(<span class="title">function</span> <span class="list">($)</span>{
  $.fn.maxHeight = function <span class="list">()</span>{
    var max = <span class="number">0</span><span class="comment">;</span>
    // 下面这个this，指的是jQuery对象实例
    this.each<span class="list">(<span class="title">function</span><span class="list">()</span> {
        // 回调函数内部，this指的是DOM对象
        max = Math.max<span class="list">(<span class="title">max</span>, $<span class="list">(<span class="title">this</span>)</span>.height<span class="list">()</span>)</span><span class="comment">;</span>
    })</span><span class="comment">;</span>
    return max<span class="comment">;</span>
  }<span class="comment">;</span>
})</span><span class="list">(<span class="title">jQuery</span>)</span><span class="comment">;</span>
</code></pre><p>上面这个maxHeight插件的作用是，返回一系列DOM对象中高度最高的那个对象的高度。<br>大多数情况下，插件应该返回jQuery对象，这样可以保持链式操作。</p>
<pre><code>(<span class="function"><span class="keyword">function</span> <span class="params">($)</span>{</span>
  $.fn.greenify = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
    <span class="keyword">this</span>.css(<span class="string">"color"</span>, <span class="string">"green"</span>);
    <span class="keyword">return</span> <span class="keyword">this</span>;
  };
})(jQuery);

$(<span class="string">"a"</span>).greenify().addClass(<span class="string">"greenified"</span>);
</code></pre><p>上面代码返回this对象，即jQuery对象实例，所以接下来可以采用链式操作。<br>对于包含多个jQuery对象的结果集，可以采用each方法，进行处理。</p>
<pre><code>$.fn.myNewPlugin = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="comment">// 处理每个对象</span>
    });
};
</code></pre><p>插件可以接受一个属性对象参数。</p>
<pre><code>(<span class="function"><span class="keyword">function</span> <span class="params">($)</span>{</span>
  $.fn.tooltip = <span class="function"><span class="keyword">function</span> <span class="params">(options)</span>{</span>
    <span class="keyword">var</span> settings = $.extend( {
      <span class="string">'location'</span>         : <span class="string">'top'</span>,
      <span class="string">'background-color'</span> : <span class="string">'blue'</span>
    }, options);
    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
      <span class="comment">// 填入插件代码</span>
    });
  };
})(jQuery);
</code></pre><p>上面代码使用extend方法，为参数对象设置属性的默认值。</p>
<h3 id="实例">实例</h3>
<p>下面是一个将a元素的href属性添加到网页的插件。</p>
<pre><code>(<span class="function"><span class="keyword">function</span><span class="params">($)</span>{</span>
    $.fn.showLinkLocation = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="string">'a'</span>).append(<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
            <span class="keyword">return</span> <span class="string">' ('</span> + <span class="keyword">this</span>.href + <span class="string">')'</span>;
        });
    };
}(jQuery));
</code></pre><p>// 用法</p>
<pre><code><span class="variable">$(</span><span class="string">'a'</span>).showLinkLocation();
</code></pre><p>从上面的代码可以看到，插件的开发和使用都非常简单。</p>
<h3 id="插件的发布">插件的发布</h3>
<p>编写插件以后，可以将它发布到jQuery官方网站上。<br>首先，编写一个插件的信息文件yourPluginName.jquery.json。文件名中的yourPluginName表示你的插件名。</p>
<pre><code>{
  <span class="string">"name"</span>: <span class="string">"plugin_name"</span>,
  <span class="string">"title"</span>: <span class="string">"plugin_long_title"</span>,
  <span class="string">"description"</span>: <span class="string">"..."</span>,
  <span class="string">"keywords"</span>: [<span class="string">"jquery"</span>, <span class="string">"plugins"</span>],
  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,
  <span class="string">"author"</span>: {
    <span class="string">"name"</span>: <span class="string">"..."</span>,
    <span class="string">"url"</span>: <span class="string">"..."</span>
  },
  <span class="string">"maintainers"</span>: [
    {
      <span class="string">"name"</span>: <span class="string">"..."</span>,
      <span class="string">"url"</span>: <span class="string">"..."</span>
    }
  ],
  <span class="string">"licenses"</span>: [
    {
      <span class="string">"type"</span>: <span class="string">"MIT"</span>,
      <span class="string">"url"</span>: <span class="string">"http://www.opensource.org/licenses/mit-license.php"</span>
    }
  ],
  <span class="string">"bugs"</span>: <span class="string">"..."</span>, <span class="comment">// bugs url</span>
  <span class="string">"homepage"</span>: <span class="string">"..."</span>, <span class="comment">// homepage url</span>
  <span class="string">"docs"</span>: <span class="string">"..."</span>, <span class="comment">// docs url</span>
  <span class="string">"download"</span>: <span class="string">"..."</span>, <span class="comment">// download url</span>
  <span class="string">"dependencies"</span>: {
    <span class="string">"jquery"</span>: <span class="string">"&gt;=1.4"</span>
  }
}
</code></pre><p>上面是一个插件信息文件的实例。<br>然后，将代码文件发布到Github，在设置页面点击“Service Hooks/WebHook URLs”选项，填入网址<a href="http://plugins.jquery.com/postreceive-hook" target="_blank">http://plugins.jquery.com/postreceive-hook</a>，再点击“Update Settings”进行保存。<br><em>文章来源：<a href="http://www.w3cui.com/?p=306" target="_blank">w3cui.com</a></em></p>
]]></content>
    
    
      <category term="javascript" scheme="http://www.haozi520.com/tags/javascript/"/>
    
      <category term="jquery" scheme="http://www.haozi520.com/tags/jquery/"/>
    
      <category term="javascript" scheme="http://www.haozi520.com/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程：生命周期和状态控制]]></title>
    <link href="http://www.haozi520.com/2014/06/18/java-thread-003/"/>
    <id>http://www.haozi520.com/2014/06/18/java-thread-003/</id>
    <published>2014-06-18T09:44:00.000Z</published>
    <updated>2014-06-18T13:48:57.000Z</updated>
    <content type="html"><![CDATA[<p>上一篇整理了<a href="http://www.haozi520.com/2014/06/18/java-thread-002/index.html" target="_blank">《java线程：创建与启动》</a>,介绍了怎样扩展Thread类和实现Runnable接口的多线程方法，<br>这篇将整理线程的生命周期和状态控制。<br>线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待/阻塞。</p>
<p><img src="http://haozi520.u.qiniudn.com/20140618180812.png" alt="线程的状态转换"></p>
<h3 id="新建状态">新建状态</h3>
<p>用new关键字和Thread类或其子类建立一个线程对象后，该线程对象就处于新生状态。处于新生状态的线程有自己的内存空间，通过调用start方法进入就绪状态（runnable）。<br>注意：不能对已经启动的线程再次调用start()方法，否则会出现java.lang.IllegalThreadStateException异常。</p>
<h3 id="就绪状态">就绪状态</h3>
<p>处于就绪状态的线程已经具备了运行条件，但还没有分配到CPU，处于线程就绪队列（尽管是采用队列形式，事实上，把它称为可运行池而不是可运行队列。因为cpu的调度不一定是按照先进先出的顺序来调度的），等待系统为其分配CPU。等待状态并不是执行状态，当系统选定一个等待执行的Thread对象后，它就会从等待执行状态进入执行状态，系统挑选的动作称之为“cpu调度”。一旦获得CPU，线程就进入运行状态并自动调用自己的run方法。<br>提示：如果希望子线程调用start()方法后立即执行，可以使用Thread.sleep()方式使主线程睡眠一伙儿，转去执行子线程。</p>
<h3 id="运行状态">运行状态</h3>
<p>处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。<br>处于就绪状态的线程，如果获得了cpu的调度，就会从就绪状态变为运行状态，执行run()方法中的任务。如果该线程失去了cpu资源，就会又从运行状态变为就绪状态。重新等待系统分配资源。也可以对在运行状态的线程调用yield()方法，它就会让出cpu资源，再次变为就绪状态。</p>
<p>当发生如下情况是，线程会从运行状态变为阻塞状态：</p>
<ul>
<li>线程调用sleep方法主动放弃所占用的系统资源</li>
<li>线程调用一个阻塞式IO方法，在该方法返回之前，该线程被阻塞</li>
<li>线程试图获得一个同步监视器，但更改同步监视器正被其他线程所持有</li>
<li>线程在等待某个通知（notify）</li>
<li>程序调用了线程的suspend方法将线程挂起。不过该方法容易导致死锁，所以程序应该尽量避免使用该方法。</li>
</ul>
<p>当线程的run()方法执行完，或者被强制性地终止，例如出现异常，或者调用了stop()、desyory()方法等等，就会从运行状态转变为死亡状态。</p>
<h3 id="阻塞状态">阻塞状态</h3>
<p>处于运行状态的线程在某些情况下，如执行了sleep（睡眠）方法，或等待I/O设备等资源，将让出CPU并暂时停止自己的运行，进入阻塞状态。<br>在阻塞状态的线程不能进入就绪队列。只有当引起阻塞的原因消除时，如睡眠时间已到，或等待的I/O设备空闲下来，线程便转入就绪状态，重新到就绪队列中排队等待，被系统选中后从原来停止的位置开始继续运行,有三种方法可以暂停Threads执行：</p>
<h3 id="死亡状态">死亡状态</h3>
<p>当线程的run()方法执行完，或者被强制性地终止，就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。 如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</p>
<h3 id="线程状态的控制">线程状态的控制</h3>
<p>Java提供了一些便捷的方法用于会线程状态的控制。 .</p>
<ul>
<li>void  destroy() 已过时。 该方法最初用于破坏该线程，但不作任何清除。它所保持的任何监视器都会保持锁定状态。不过，该方法决不会被实现。即使要实现，它也极有可能以suspend() 方式被死锁。如果目标线程被破坏时保持一个保护关键系统资源的锁，则任何线程在任何时候都无法再次访问该资源。如果另一个线程曾试图锁定该资源，则会出现死锁。这类死锁通常会证明它们自己是“冻结”的进程。</li>
<li>void  interrupt() 中断线程。</li>
<li>void  join() 等待该线程终止。</li>
<li>void  join(long millis) 等待该线程终止的时间最长为 millis 毫秒。</li>
<li>void  join(long millis, int nanos) 等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒。</li>
<li>void  resume()已过时。该方法只与suspend()一起使用，但suspend() 已经遭到反对，<br>因为它具有死锁倾向。</li>
<li>void  setDaemon(boolean on)将该线程标记为守护线程或用户线程。</li>
<li>void  setPriority(int newPriority)更改线程的优先级。</li>
<li>static void sleep(long millis)在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</li>
<li>static void sleep(long millis, int nanos)在指定的毫秒数加指定的纳秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</li>
<li>void  start() 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</li>
<li>void  stop() 已过时。 该方法具有固有的不安全性。用Thread.stop来终止线程将释放它已经锁定的所有监视器（作为沿堆栈向上传播的未检查ThreadDeath 异常的一个自然后果）。如果以前受这些监视器保护的任何对象都处于一种不一致的状态，则损坏的对象将对其他线程可见，这有可能导致任意的行为。stop 的许多使用都应由只修改某些变量以指示目标线程应该停止运行的代码来取代。目标线程应定期检查该变量，并且如果该变量指示它要停止运行，则从其运行方法依次返回。如果目标线程等待很长时间（例如基于一个条件变量），则应使用interrupt 方法来中断该等待。</li>
<li>void  stop(Throwable obj)已过时。该方法具有固有的不安全性。有关详细信息</li>
<li>请参阅stop()。该方法的附加危险是它可用于生成目标线程未准备处理的异常（包括<br>若没有该方法该线程不太可能抛出的已检查的异常）。</li>
<li>void  suspend()已过时。 该方法已经遭到反对，因为它具有固有的死锁倾向。如果目标线程挂起时在保护关键系统资源的监视器上保持有锁，则在目标线程重新开始以前任何线程都不能访问该资源。如果重新开始目标线程的线程想在调用resume 之前锁定该监视器，则会发生死锁。这类死锁通常会证明自己是“冻结”的进程。</li>
<li>static void yield()暂停当前正在执行的线程对象，并执行其他线程。<br>可以看到很多方法，已经标注为过时的，我们应该尽可能的避免使用它们，而应该重点关注start()、interrupt()、join()、sleep()、yield()等直接控制方法，和setDaemon()、setPriority()等间接控制方法。</li>
</ul>
<h4 id="线程睡眠——sleep">线程睡眠——sleep</h4>
<p>如果我们需要让当前正在执行的线程暂停一段时间，并进入阻塞状态，则可以通过调用Thread的sleep方法，从上面可以看到sleep方法有两种重载的形式，但是使用方法一样。<br>比如，我们想要使主线程每休眠100毫秒，然后再打印出数字：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Test1 {  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) throws InterruptedException {  
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++){  
            System.<span class="keyword">out</span>.println(<span class="string">"main"</span>+i);  
            Thread.sleep(<span class="number">100</span>);  
        }  
    }  
}  
</code></pre><p>可以明显看到打印的数字在时间上有些许的间隔。</p>
<p>注意如下几点问题<br>1、sleep是静态方法，最好不要用Thread的实例对象调用它，因为它睡眠的始终是当前正在运行的线程，而不是调用它的线程对象，它只对正在运行状态的线程对象有效。看下面的例子：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Test1 {  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) throws InterruptedException {  
        System.<span class="keyword">out</span>.println(Thread.currentThread().getName());  
        MyThread myThread=<span class="keyword">new</span> MyThread();  
        myThread.start();  
        myThread.sleep(<span class="number">1000</span>);<span class="comment">//这里sleep的就是main线程，而非myThread线程  </span>
        Thread.sleep(<span class="number">10</span>);  
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++){  
            System.<span class="keyword">out</span>.println(<span class="string">"main"</span>+i);  
        }  
    }  
}  
</code></pre><p>2、Java线程调度是Java多线程的核心，只有良好的调度，才能充分发挥系统的性能，提高程序的执行效率。但是不管程序员怎么编写调度，只能最大限度的影响线程执行的次序，而不能做到精准控制。因为使用sleep方法之后，线程是进入阻塞状态的，只有当睡眠的时间结束，才会重新进入到就绪状态，而就绪状态进入到运行状态，是由系统控制的，我们不可能精准的去干涉它，所以如果调用Thread.sleep(1000)使得线程睡眠1秒，可能结果会大于1秒。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> {</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws InterruptedException {  
        <span class="keyword">new</span> MyThread().start();  
        <span class="keyword">new</span> MyThread().start();  
    }  
}  

<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {  
            System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"线程"</span> + i + <span class="string">"次执行！"</span>);  
            <span class="keyword">try</span> {  
                Thread.sleep(<span class="number">50</span>);  
            } <span class="keyword">catch</span> (InterruptedException e) {  
                e.printStackTrace();  
            }  
        }  
    }  
}  
</code></pre><p>看某一次的运行结果：</p>
<pre><code><span class="keyword">Thread</span>-<span class="number">0</span>线程<span class="number">0</span>次执行！  
<span class="keyword">Thread</span>-<span class="number">1</span>线程<span class="number">0</span>次执行！  
<span class="keyword">Thread</span>-<span class="number">1</span>线程<span class="number">1</span>次执行！  
<span class="keyword">Thread</span>-<span class="number">0</span>线程<span class="number">1</span>次执行！  
<span class="keyword">Thread</span>-<span class="number">0</span>线程<span class="number">2</span>次执行！  
<span class="keyword">Thread</span>-<span class="number">1</span>线程<span class="number">2</span>次执行！  
</code></pre><p>可以看到，线程0首先执行，然后线程1执行一次，又了执行一次。可以看到它并不是按照sleep的顺序执行的。</p>
<h4 id="线程让步——yield">线程让步——yield</h4>
<p>yield()方法和sleep()方法有点相似，它也是Thread类提供的一个静态的方法，它也可以让当前正在执行的线程暂停，让出cpu资源给其他的线程。但是和sleep()方法不同的是，它不会进入到阻塞状态，而是进入到就绪状态。yield()方法只是让当前线程暂停一下，重新进入就绪的线程池中，让系统的线程调度器重新调度器重新调度一次，完全可能出现这样的情况：当某个线程调用yield()方法之后，线程调度器又将其调度出来重新进入到运行状态执行。<br>实际上，当某个线程调用了yield()方法暂停之后，优先级与当前线程相同，或者优先级比当前线程更高的就绪状态的线程更有可能获得执行的机会，当然，只是有可能，因为我们不可能精确的干涉cpu调度线程。<br>yield的用法：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> {</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws InterruptedException {  
        <span class="keyword">new</span> MyThread(<span class="string">"低级"</span>, <span class="number">1</span>).start();  
        <span class="keyword">new</span> MyThread(<span class="string">"中级"</span>, <span class="number">5</span>).start();  
        <span class="keyword">new</span> MyThread(<span class="string">"高级"</span>, <span class="number">10</span>).start();  
    }  
}  

<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    <span class="keyword">public</span> MyThread(String name, <span class="keyword">int</span> pro) {  
        <span class="keyword">super</span>(name);<span class="comment">// 设置线程的名称  </span>
        <span class="keyword">this</span>.setPriority(pro);<span class="comment">// 设置优先级  </span>
    }  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) {  
            System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"线程第"</span> + i + <span class="string">"次执行！"</span>);  
            <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)  
                Thread.yield();  
        }  
    }  
}  
</code></pre><h4 id="关于sleep()方法和yield()方的区别如下：">关于sleep()方法和yield()方的区别如下：</h4>
<ul>
<li>sleep方法暂停当前线程后，会进入阻塞状态，只有当睡眠时间到了，才会转入就绪状态。而yield方法调用后 ，是直接进入就绪状态，所以有可能刚进入就绪状态，又被调度到运行状态。</li>
<li>sleep方法声明抛出了InterruptedException，所以调用sleep方法的时候要捕获该异常，或者显示声明抛出该异常。而yield方法则没有声明抛出任务异常。</li>
<li>sleep方法比yield方法有更好的可移植性，通常不要依靠yield方法来控制并发线程的执行。</li>
</ul>
<h4 id="线程合并——join">线程合并——join</h4>
<p>线程的合并的含义就是将几个并行线程的线程合并为一个单线程执行，应用场景是当一个线程必须等待另一个线程执行完毕才能执行时，Thread类提供了join方法来完成这个功能，注意，它不是静态方法。<br>从上面的方法的列表可以看到，它有3个重载的方法：</p>
<ul>
<li>void join()  当前线程等该加入该线程后面，等待该线程终止。    </li>
<li>void join(long millis)  当前线程等待该线程终止的时间最长为 millis 毫秒。 如果在millis时间内，该线程没有执行完，那么当前线程进入就绪状态，重新等待cpu调度 </li>
<li><p>void join(long millis,int nanos)  等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒。如果在millis时间内，该线程没有执行完，那么当前线程进入就绪状态，重新等待cpu调度<br>例子：</p>
<p>  public class Test1 {  </p>
<pre><code>  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) throws InterruptedException {  
      MyThread thread=<span class="keyword">new</span> MyThread();  
      thread.start();  
      thread.<span class="keyword">join</span>(<span class="number">1</span>);<span class="comment">//将主线程加入到子线程后面，不过如果子线程在1毫秒时间内没执行完，则主线程便不再等待它执行完，进入就绪状态，等待cpu调度  </span>
      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++){  
          System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">"线程第"</span> + i + <span class="string">"次执行！"</span>);  
      }  
  }  
</code></pre><p>  }<br>  class MyThread extends Thread {  </p>
<pre><code>  @Override  
  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {  
      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {  
          System.<span class="keyword">out</span>.println(<span class="keyword">this</span>.getName() + <span class="string">"线程第"</span> + i + <span class="string">"次执行！"</span>);  
      }  
  }  
</code></pre><p>  }  </p>
</li>
</ul>
<p>在这个例子中，在主线程中调用thread.join(); 就是将主线程加入到thread子线程后面等待执行。不过有时间限制，为1毫秒。</p>
<h3 id="线程的优先级">线程的优先级</h3>
<p>每个线程执行时都有一个优先级的属性，优先级高的线程可以获得较多的执行机会，而优先级低的线程则获得较少的执行机会。与线程休眠类似，线程的优先级仍然无法保障线程的执行次序。只不过，优先级高的线程获取CPU资源的概率较大，优先级低的也并非没机会执行。<br>每个线程默认的优先级都与创建它的父线程具有相同的优先级，在默认情况下，main线程具有普通优先级。<br>Thread类提供了setPriority(int newPriority)和getPriority()方法来设置和返回一个指定线程的优先级，其中setPriority方法的参数是一个整数，范围是1~·0之间，也可以使用Thread类提供的三个静态常量：<br>MAX_PRIORITY   =10<br>MIN_PRIORITY   =1<br>NORM_PRIORITY   =5<br>例子：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> {</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws InterruptedException {  
        <span class="keyword">new</span> MyThread(<span class="string">"高级"</span>, <span class="number">10</span>).start();  
        <span class="keyword">new</span> MyThread(<span class="string">"低级"</span>, <span class="number">1</span>).start();  
    }  
}  

<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    <span class="keyword">public</span> MyThread(String name,<span class="keyword">int</span> pro) {  
        <span class="keyword">super</span>(name);<span class="comment">//设置线程的名称  </span>
        setPriority(pro);<span class="comment">//设置线程的优先级  </span>
    }  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {  
            System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"线程第"</span> + i + <span class="string">"次执行！"</span>);  
        }  
    }  
}  
</code></pre><p>从结果可以看到 ，一般情况下，高级线程更显执行完毕。<br>注意一点：虽然Java提供了10个优先级别，但这些优先级别需要操作系统的支持。不同的操作系统的优先级并不相同，而且也不能很好的和Java的10个优先级别对应。所以我们应该使用MAX_PRIORITY、MIN_PRIORITY和NORM_PRIORITY三个静态常量来设定优先级，这样才能保证程序最好的可移植性。</p>
<h3 id="守护线程">守护线程</h3>
<p>守护线程与普通线程写法上基本么啥区别，调用线程对象的方法setDaemon(true)，则可以将其设置为守护线程。</p>
<p>守护线程使用的情况较少，但并非无用，举例来说，JVM的垃圾回收、内存管理等线程都是守护线程。还有就是在做数据库应用时候，使用的数据库连接池，连接池本身也包含着很多后台线程，监控连接个数、超时时间、状态等等。</p>
<p>setDaemon方法的详细说明：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setDaemon</span>(<span class="keyword">boolean</span> on)
</code></pre><p>将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。<br>该方法必须在启动线程前调用。 该方法首先调用该线程的 checkAccess 方法，且不带任何参数。这可能抛出 SecurityException（在当前线程中）。<br>参数：<br>    on - 如果为 true，则将该线程标记为守护线程。<br>抛出：<br>    IllegalThreadStateException - 如果该线程处于活动状态。<br>    SecurityException - 如果当前线程无法修改该线程。</p>
<pre><code><span class="comment">/** 
* Java线程：线程的调度-守护线程 
*/</span>  
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> {</span>  
        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {  
                Thread t1 = <span class="keyword">new</span> MyCommon();  
                Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyDaemon());  
                t2.setDaemon(<span class="keyword">true</span>);        <span class="comment">//设置为守护线程  </span>

                t2.start();  
                t1.start();  
        }  
}  

<span class="class"><span class="keyword">class</span> <span class="title">MyCommon</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
        <span class="keyword">public</span> <span class="keyword">void</span> run() {  
                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {  
                        System.out.println(<span class="string">"线程1第"</span> + i + <span class="string">"次执行！"</span>);  
                        <span class="keyword">try</span> {  
                                Thread.sleep(<span class="number">7</span>);  
                        } <span class="keyword">catch</span> (InterruptedException e) {  
                                e.printStackTrace();  
                        }  
                }  
        }  
}  

<span class="class"><span class="keyword">class</span> <span class="title">MyDaemon</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Runnable</span> {</span>  
        <span class="keyword">public</span> <span class="keyword">void</span> run() {  
                <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999</span>L; i++) {  
                        System.out.println(<span class="string">"后台线程第"</span> + i + <span class="string">"次执行！"</span>);  
                        <span class="keyword">try</span> {  
                                Thread.sleep(<span class="number">7</span>);  
                        } <span class="keyword">catch</span> (InterruptedException e) {  
                                e.printStackTrace();  
                        }  
                }  
        }  
}  
</code></pre><p>执行结果：</p>
<pre><code>后台线程第0次执行！  
线程1第0次执行！  
线程1第1次执行！  
后台线程第1次执行！  
后台线程第2次执行！  
线程1第2次执行！  
线程1第3次执行！  
后台线程第3次执行！  
线程1第4次执行！  
后台线程第4次执行！  
后台线程第5次执行！  
后台线程第6次执行！  
后台线程第7次执行！   
</code></pre><p>从上面的执行结果可以看出：前台线程是保证执行完毕的，后台线程还没有执行完毕就退出了。</p>
<p>实际上：JRE判断程序是否执行结束的标准是所有的前台执线程行完毕了，而不管后台线程的状态，因此，在使用后台县城时候一定要注意这个问题。</p>
<p>守护线程的用途：</p>
<blockquote>
<p>守护线程通常用于执行一些后台作业，例如在你的应用程序运行时播放背景音乐，在文字编辑器里做自动语法检查、自动保存等功能。Java的垃圾回收也是一个守护线程。守护线<br>的好处就是你不需要关心它的结束问题。例如你在你的应用程序运行的时候希望播放背景音乐，如果将这个播放背景音乐的线程设定为非守护线程，那么在用户请求退出的时候，<br>不仅要退出主线程，还要通知播放背景音乐的线程退出；如果设定为守护线程则不需要了。</p>
</blockquote>
<h3 id="如何结束一个线程">如何结束一个线程</h3>
<p>Thread.stop()、Thread.suspend、Thread.resume、Runtime.runFinalizersOnExit这些终止线程运行的方法已经被废弃了，使用它们是极端不安全的！想要安全有效的结束一个线程，可以使用下面的方法。</p>
<h4 id="正常执行完run方法，然后结束掉">正常执行完run方法，然后结束掉</h4>
<h4 id="控制循环条件和判断条件的标识符来结束掉线程">控制循环条件和判断条件的标识符来结束掉线程</h4>
<p>比如说run方法这样写：</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    <span class="keyword">int</span> i=<span class="number">0</span>;  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">while</span> (<span class="keyword">true</span>) {  
            <span class="keyword">if</span>(i==<span class="number">10</span>)  
                <span class="keyword">break</span>;  
            i++;  
            System.out.println(i);  

        }  
    }  
}  
</code></pre><p>或者</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    <span class="keyword">int</span> i=<span class="number">0</span>;  
    <span class="keyword">boolean</span> next=<span class="keyword">true</span>;  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">while</span> (next) {  
            <span class="keyword">if</span>(i==<span class="number">10</span>)  
                next=<span class="keyword">false</span>;  
            i++;  
            System.out.println(i);  
        }  
    }  
}  
</code></pre><p>或者</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    <span class="keyword">int</span> i=<span class="number">0</span>;  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">while</span> (<span class="keyword">true</span>) {  
            <span class="keyword">if</span>(i==<span class="number">10</span>)  
                <span class="keyword">return</span>;  
            i++;  
            System.out.println(i);  
        }  
    }  
}  
</code></pre><p>只要保证在一定的情况下，run方法能够执行完毕即可。而不是while(true)的无线循环。</p>
<h4 id="使用interrupt结束一个线程。">使用interrupt结束一个线程。</h4>
<p>诚然，使用第2中方法的标识符来结束一个线程，是一个不错的方法，但是如果，该线程是处于sleep、wait、join的状态的时候，while循环就不会执行，那么我们的标识符就无用武之地了，当然也不能再通过它来结束处于这3种状态的线程了。<br>可以使用interrupt这个巧妙的方式结束掉这个线程。<br>我们看看sleep、wait、join方法的声明：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span>() <span class="keyword">throws</span> InterruptedException  
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sleep</span>(<span class="keyword">long</span> millis) <span class="keyword">throws</span> InterruptedException  
<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span>() <span class="keyword">throws</span> InterruptedException  
</code></pre><p>可以看到，这三者有一个共同点，都抛出了一个InterruptedException的异常。<br>在什么时候会产生这样一个异常呢？<br>每个Thread都有一个中断状状态，默认为false。可以通过Thread对象的isInterrupted()方法来判断该线程的中断状态。可以通过Thread对象的interrupt()方法将中断状态设置为true。<br>当一个线程处于sleep、wait、join这三种状态之一的时候，如果此时他的中断状态为true，那么它就会抛出一个InterruptedException的异常，并将中断状态重新设置为false。<br>看下面的简单的例子：<br>    public class Test1 {<br>        public static void main(String[] args) throws InterruptedException {<br>            MyThread thread=new MyThread();<br>            thread.start();<br>        }<br>    }<br>    class MyThread extends Thread {<br>        int i=1;<br>        @Override<br>        public void run() {<br>            while (true) {<br>                System.out.println(i);<br>                System.out.println(this.isInterrupted());<br>                try {<br>                    System.out.println(“我马上去sleep了”);<br>                    Thread.sleep(2000);<br>                    this.interrupt();<br>                } catch (InterruptedException e) {<br>                    System.out.println(“异常捕获了”+this.isInterrupted());<br>                    return;<br>                }<br>                i++;<br>            }<br>        }<br>    }<br>测试结果：</p>
<pre><code><span class="number">1</span>  
<span class="literal">false</span>  
我马上去sleep了  
<span class="number">2</span>  
<span class="literal">true</span>  
我马上去sleep了  
异常捕获了<span class="literal">false</span>  
</code></pre><p>可以看到，首先执行第一次while循环，在第一次循环中，睡眠2秒，然后将中断状态设置为true。当进入到第二次循环的时候，中断状态就是第一次设置的true，当它再次进入sleep的时候，马上就抛出了InterruptedException异常，然后被我们捕获了。然后中断状态又被重新自动设置为false了（从最后一条输出可以看出来）。</p>
<p>所以，我们可以使用interrupt方法结束一个线程。具体使用如下：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> {</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) throws InterruptedException {  
        MyThread thread=<span class="keyword">new</span> MyThread();  
        thread.start();  
        Thread.sleep(<span class="number">3000</span>);  
        thread.interrupt();  
    }  
}  

<span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="inheritance"><span class="keyword">extends</span></span> <span class="title">Thread</span> {</span>  
    <span class="keyword">int</span> i=<span class="number">0</span>;  
    @Override  
    <span class="keyword">public</span> <span class="keyword">void</span> run() {  
        <span class="keyword">while</span> (<span class="keyword">true</span>) {  
            System.out.println(i);  
            <span class="keyword">try</span> {  
                Thread.sleep(<span class="number">1000</span>);  
            } <span class="keyword">catch</span> (InterruptedException e) {  
                System.out.println(<span class="string">"中断异常被捕获了"</span>);  
                <span class="keyword">return</span>;  
            }  
            i++;  
        }  
    }  
}  
</code></pre><p>多测试几次，会发现一般有两种执行结果：</p>
<pre><code>0  
1  
2  
中断异常被捕获了  
</code></pre><p>或者</p>
<pre><code>0  
1  
2  
3  
中断异常被捕获了  
</code></pre><p>这两种结果恰恰说明了,只要一个线程的中断状态一旦为true，只要它进入sleep等状态，或者处于sleep状态，立马回抛出InterruptedException异常。<br>第一种情况，是当主线程从3秒睡眠状态醒来之后，调用了子线程的interrupt方法，此时子线程正处于sleep状态，立马抛出InterruptedException异常。<br>第一种情况，是当主线程从3秒睡眠状态醒来之后，调用了子线程的interrupt方法，此时子线程还没有处于sleep状态。然后再第3次while循环的时候，在此进入sleep状态，立马抛出InterruptedException异常。</p>
]]></content>
    
    
      <category term="java" scheme="http://www.haozi520.com/tags/java/"/>
    
      <category term="线程" scheme="http://www.haozi520.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="java" scheme="http://www.haozi520.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程：创建与启动]]></title>
    <link href="http://www.haozi520.com/2014/06/18/java-thread-002/"/>
    <id>http://www.haozi520.com/2014/06/18/java-thread-002/</id>
    <published>2014-06-18T08:03:00.000Z</published>
    <updated>2014-06-18T13:54:05.000Z</updated>
    <content type="html"><![CDATA[<p>上一篇整理了<a href="http://www.haozi520.com/2014/06/18/java-thread-001/index.html" target="_blank">《java线程：概念与原理》</a>,介绍了线程与进程的关系，这篇将整理线程的创建与启动。<br>在java中可有两种方式实现多线程，一种是继承Thread类，一种是实现Runnable接口；Thread类是在java.lang包中定义的。一个类只要继承了Thread类同时覆写了本类中的run()方法就可以实现多线程操作了，但是一个类只能继承一个父类，这是此方法的局限。</p>
<h3 id="扩展java-lang-Thread类">扩展java.lang.Thread类</h3>
<p>实例化线程时直接new出来，并调用start方法可以实现线程交互运行，不能直接调用run方法</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span>{</span>
    <span class="keyword">private</span> String name;
    <span class="keyword">public</span> <span class="title">MyThread</span>(){}
    <span class="keyword">public</span> <span class="title">MyThread</span>(String name){
        <span class="keyword">super</span>();
        <span class="keyword">this</span>.name=name;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){
            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">1000000</span>;k++);<span class="comment">//为了能够清楚看到多线效果</span>
            System.out.println(<span class="string">"线程开始："</span>+<span class="keyword">this</span>.name+<span class="string">"="</span>+i)
        }
    }
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyThread</span>{</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        MyThread mA=<span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>);
        MyThread mB=<span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>);
        mA.run();
        mB.run();
    }
}
</code></pre><p>执行的结果：</p>
<pre><code><span class="xml"><span class="tag">线程开始：线程<span class="attribute">A</span>=<span class="value">0</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">1</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">2</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">3</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">4</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">0</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">1</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">2</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">3</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">4</span></span></span>
</code></pre><p>我们会发现这些都是顺序执行的，并没有相互运行，说明我们的调用方法不对。JDK的文档中可以发现，一旦调用start()方法，则会通过JVM找到run()方法，下面启动start()方法<br>启动线程：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> TestMyThread{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        MyThread mA=<span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>);
        MyThread mB=<span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>);
        mA.start();
        mB.start();
    }
}
</code></pre><p>执行的结果：</p>
<pre><code><span class="xml"><span class="tag">线程开始：线程<span class="attribute">B</span>=<span class="value">0</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">0</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">1</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">1</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">2</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">3</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">2</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">4</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">3</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">4</span></span></span>
</code></pre><p>这样程序可以正常完成交互式运行。那么为啥非要使用start();方法启动多线程呢？<br>找到java.lang.Thread中的start()方法的定义，可以发现此方法中使用了private native void start0();其中native关键字表示可以调用操作系统的底层函数，因为多线程的实现需要本地操作系统的支持,那么这样的技术成为JNI技术（java Native Interface）</p>
<pre><code><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span>() {
    <span class="javadoc">/**
 * This method is not invoked for the main method thread or "system"
 * group threads created/set up by the VM. Any new functionality added 
 * to this method in the future may have to also be added to the VM.
 *
 * A zero status value corresponds to state "NEW".
     */</span>
    <span class="keyword">if</span> (threadStatus != <span class="number">0</span> || <span class="keyword">this</span> != me)
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();
    group.add(<span class="keyword">this</span>);
    start0();
    <span class="keyword">if</span> (stopBeforeStart) {
        stop0(throwableFromStop);
    }
}
<span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span>();
</code></pre><h3 id="实现java-lang-Runnable接口">实现java.lang.Runnable接口</h3>
<p>在实际开发中一个多线程的操作很少使用Thread类，而是通过Runnable接口完成。<br>但是在使用Runnable实现类时则使用Thread的构造方法，通过Thread来启动Runnable实现多线程：</p>
<ul>
<li>Thread(Runnable target) </li>
<li>Thread(Runnable target, String name) </li>
<li>Thread(ThreadGroup group, Runnable target) </li>
<li>Thread(ThreadGroup group, Runnable target, String name) </li>
<li>Thread(ThreadGroup group, Runnable target, String name, long stackSize)</li>
</ul>
<hr>
<p>Runnable接口如下：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">interface</span> Runnable{  
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>();  
} 
</code></pre><p>例子代码：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Thread</span>{</span>
    <span class="keyword">private</span> String name;
    <span class="keyword">public</span> <span class="title">MyThread</span>(){}
    <span class="keyword">public</span> <span class="title">MyThread</span>(String name){
        <span class="keyword">super</span>();
        <span class="keyword">this</span>.name=name;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){
            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">1000000</span>;k++);<span class="comment">//为了能够清楚看到多线效果</span>
            System.out.println(<span class="string">"线程开始："</span>+<span class="keyword">this</span>.name+<span class="string">"="</span>+i)
        }
    }
}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyThread</span>{</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        MyThread mA=<span class="keyword">new</span> MyThread(<span class="string">"线程A"</span>);
        MyThread mB=<span class="keyword">new</span> MyThread(<span class="string">"线程B"</span>);
        <span class="keyword">new</span> Thread(mA).start();
        <span class="keyword">new</span> Thread(mB).start();
    }
}
</code></pre><p>执行结果：</p>
<pre><code><span class="xml"><span class="tag">线程开始：线程<span class="attribute">A</span>=<span class="value">0</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">0</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">1</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">1</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">2</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">2</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">3</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">3</span>
线程开始：线程<span class="attribute">A</span>=<span class="value">4</span>
线程开始：线程<span class="attribute">B</span>=<span class="value">4</span></span></span>
</code></pre><p>使用实现接口 Runnable 的对象创建一个线程时，启动该线程将导致在独立执行的线程中<br>调用对象的 run 方法。方法 run 的常规协定是，它可能执行任何所需的操作。</p>
<h3 id="启动线程">启动线程</h3>
<p>在线程的Thread对象上调用start()方法，而不是run()或者别的方法。<br>在调用start()方法之前：线程处于新状态中，新状态指有一个Thread对象，但还没有<br>一个真正的线程。</p>
<p>在调用start()方法之后：发生了一系列复杂的事情</p>
<ul>
<li>启动新的执行线程（具有新的调用栈）</li>
<li>该线程从新状态转移到可运行状态</li>
<li>当该线程获得机会执行时，其目标run()方法将运行</li>
</ul>
<p>注意：对Java来说，run()方法没有任何特别之处。像main()方法一样，它只是新线程知道<br>调用的方法名称(和签名)。因此，在Runnable上或者Thread上调用run方法是合法的。但并<br>不启动新的线程。</p>
<h3 id="两种实现方式的区别和联系">两种实现方式的区别和联系</h3>
<p>在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：</p>
<ul>
<li>避免点继承的局限，一个类可以继承多个接口</li>
<li>适合于资源的共享</li>
</ul>
<hr>
<p>以卖票程序为例，通过Thread类完成：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span>{</span>  
    <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;  
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){  
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++){  
            <span class="keyword">if</span>(<span class="keyword">this</span>.ticket&gt;<span class="number">0</span>){  
                System.out.println(<span class="string">"卖票：ticket"</span>+<span class="keyword">this</span>.ticket--);  
            }  
        }  
    }  
}
</code></pre><p>下面通过三个线程对象，同时卖票：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> ThreadTicket {  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {  
        MyThread mt1=<span class="keyword">new</span> MyThread();  
        MyThread mt2=<span class="keyword">new</span> MyThread();  
        MyThread mt3=<span class="keyword">new</span> MyThread();  
        mt1.start();<span class="comment">//每个线程都各卖了10张，共卖了30张票  </span>
        mt2.start();<span class="comment">//但实际只有10张票，每个线程都卖自己的票  </span>
        mt3.start();<span class="comment">//没有达到资源共享  </span>
    }  
}  
</code></pre><p>如果用Runnable就可以实现资源共享，下面看例子：</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span>{</span>  
    <span class="keyword">private</span> <span class="keyword">int</span> ticket=<span class="number">10</span>;  
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){  
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++){  
            <span class="keyword">if</span>(<span class="keyword">this</span>.ticket&gt;<span class="number">0</span>){  
                System.out.println(<span class="string">"卖票：ticket"</span>+<span class="keyword">this</span>.ticket--);  
            }  
        }                 
    }  
}  
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTicket</span> {</span>  
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {  
        MyThread mt=<span class="keyword">new</span> MyThread();  
        <span class="keyword">new</span> Thread(mt).start();<span class="comment">//同一个mt，但是在Thread中就不可以，</span>
        如果用同一个实例化对象mt，就会出现异常   
        <span class="keyword">new</span> Thread(mt).start(); 
        <span class="keyword">new</span> Thread(mt).start();  
    }  
}
</code></pre><h3 id="总结">总结</h3>
<p>实现Runnable接口比继承Thread类所具有的优势：</p>
<ul>
<li>适合多个相同的程序代码的线程去处理同一个资源</li>
<li>可以避免java中的单继承的限制</li>
<li>增加程序的健壮性，代码可以被多个线程共享，代码和数据独立。</li>
</ul>
<p>main方法其实也是一个线程。在java中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到CPU的资源。<br>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM实习在就是在操作系统中启动了一个进程。<br>主线程也有可能在子线程结束之前结束。并且子线程不受影响，不会因为主线程的结束而结束。</p>
]]></content>
    
    
      <category term="java" scheme="http://www.haozi520.com/tags/java/"/>
    
      <category term="线程" scheme="http://www.haozi520.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="java" scheme="http://www.haozi520.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程：概念与原理]]></title>
    <link href="http://www.haozi520.com/2014/06/18/java-thread-001/"/>
    <id>http://www.haozi520.com/2014/06/18/java-thread-001/</id>
    <published>2014-06-18T07:41:00.000Z</published>
    <updated>2014-06-18T07:58:03.000Z</updated>
    <content type="html"><![CDATA[<p>今天我开始整理java线程方面的知识，那么首先了解线程的概念和原理</p>
<h3 id="操作系统中线程和进程的概念">操作系统中线程和进程的概念</h3>
<p>现在的操作系统是多任务操作系统。多线程是实现多任务的一种方式。<br>进程是指一个内存中运行的应用程序，每个进程都有自己独立的一块内存空间，一个进程中可以启动多个线程。比如在Windows系统中，一个运行的exe就是一个进程。<br>线程是指进程中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。<br>“同时”执行是人的感觉，在线程之间实际上轮换执行。</p>
<h3 id="Java中的线程">Java中的线程</h3>
<p>在Java中，“线程”指两件不同的事情：</p>
<ul>
<li>java.lang.Thread类的一个实例</li>
<li>线程的执行</li>
</ul>
<p>使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义、实例化和启动新<br>线程。<br>一个Thread类实例只是一个对象，像Java中的任何其他对象一样，具有变量和方法，生死于堆上。<br>Java中，每个线程都有一个调用栈，即使不在程序中创建任何新的线程，线程也在后台运行着。<br>一个Java应用总是从main()方法开始运行，mian()方法运行在一个线程内，它被称为主线<br>程。<br>一旦创建一个新的线程，就产生一个新的调用栈。<br>线程总体分两类：用户线程和守候线程</p>
<ul>
<li>当所有用户线程执行完毕的时候，JVM自动关闭</li>
<li>守候线程却不独立于JVM，守候线程一般是由操作系统或者用户自己创建的。</li>
</ul>
]]></content>
    
    
      <category term="java" scheme="http://www.haozi520.com/tags/java/"/>
    
      <category term="线程" scheme="http://www.haozi520.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="java" scheme="http://www.haozi520.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[apache的ab工具测试结果说明]]></title>
    <link href="http://www.haozi520.com/2014/06/18/apache-ab-test-concurrency/"/>
    <id>http://www.haozi520.com/2014/06/18/apache-ab-test-concurrency/</id>
    <published>2014-06-18T04:31:00.000Z</published>
    <updated>2014-06-18T04:34:39.000Z</updated>
    <content type="html"><![CDATA[<p>Apache服务器自带了ab压力测试工具，可以用来测试网站性能，使用简单方便。有时也可以用来测试写的web服务的并发性能。ab进行一切测试的本质都是基于HTTP的，所以可以说ab对于Web服务器软件的黑盒性能测试，获得的一切数据和计算结果，都是可以通过HTTP来解释的。</p>
<h3 id="ab位置">ab位置</h3>
<h4 id="window系统下">window系统下</h4>
<p>打开apache服务的安装路径，在bin目录中有一个ab.exe的可执行程序，这个就是ab测试<br>工具</p>
<h4 id="linux系统下">linux系统下</h4>
<p>用whereis ab找到ab工具，一般在/usr/bin目录下</p>
<h3 id="用法及参数含义">用法及参数含义</h3>
<h4 id="用法">用法</h4>
<blockquote>
<p>ab [options] [<a href="http://]hostname[:port]/path" target="_blank">http://]hostname[:port]/path</a><br>eg:ab -n 5000 -c 200 <a href="http://localhost/index.php" target="_blank">http://localhost/index.php</a><br>上例表示总共访问<a href="http://localhost/index.php这个脚本5000次，200并发同时执行。" target="_blank">http://localhost/index.php这个脚本5000次，200并发同时执行。</a></p>
</blockquote>
<h3 id="参数含义">参数含义</h3>
<p>在ab工具目录下，直接运行ab会打印出ab所有的参数说明不过是英文的。如下图</p>
<ul>
<li>-n：总共的请求执行数，缺省是1；</li>
<li>-c：并发数，缺省是1；</li>
<li>-t：测试所进行的总时间，秒为单位，缺省50000s</li>
<li>-p：POST时的数据文件</li>
<li>-w: 以HTML表的格式输出结果</li>
</ul>
<p><img src="http://haozi520.u.qiniudn.com/20140618114818.png" alt=""></p>
<h3 id="使用ab工具">使用ab工具</h3>
<p>测试一个线上的服务，输入命令<br><img src="http://haozi520.u.qiniudn.com/20140618115536.png" alt=""></p>
<p>我把结果输出到一个html文件中，结果如下图</p>
<p><img src="http://haozi520.u.qiniudn.com/20140618114921.png" alt=""></p>
<ul>
<li>Server Software 表示被测试的Web服务器软件名称</li>
<li>Server Hostname 表示请求的URL主机名</li>
<li>Server Port 表示被测试的Web服务器软件的监听端口</li>
<li>Document Path 表示请求的URL中的根绝对路径，通过该文件的后缀名，<br>我们一般可以了解该请求的类型</li>
<li>Document Length 表示HTTP响应数据的正文长度</li>
<li>Concurrency Level 表示并发用户数，这是我们设置的参数之一</li>
<li>Time taken for tests 表示所有这些请求被处理完成所花费的总时间</li>
<li>Complete requests 表示总请求数量，这是我们设置的参数之一</li>
<li>Failed requests 表示失败的请求数量，这里的失败是指请求在连接服务器、发送数据等环节发生异常，以及无响应后超时的情况。如果接收到的HTTP响应数据的头信息中含有2XX以外的状态码，则会在测试结果中显示另一个名为“Non-2xx responses”的统计项，<br>用于统计这部分请求数，这些请求并不算在失败的请求中。</li>
<li>Total transferred 表示所有请求的响应数据长度总和，包括每个HTTP响应数据的头信息和正文数据的长度。注意这里不包括HTTP请求数据的长度，仅仅为web服务器流向用户PC的应用层数据总长度。</li>
<li>HTML transferred 表示所有请求的响应数据中正文数据的总和，也就是减去了Total transferred中HTTP响应数据中的头信息的长度。</li>
<li>Requests per second 吞吐率，计算公式：Complete requests / Time taken for tests</li>
<li>Time per request 用户平均请求等待时间，计算公式：Time token for tests/（Complete requests/Concurrency Level）</li>
<li>Time per requet(across all concurrent request) 服务器平均请求等待时间，<br>计算公式：Time taken for tests/Complete requests，正好是吞吐率的倒数。也可<br>以这么统计：Time per request/Concurrency Level</li>
<li>Transfer rate 表示这些请求在单位时间内从服务器获取的数据长度，计算公式：<br>Total trnasferred/ Time taken for tests，这个统计很好的说明服务器的处理能<br>力达到极限时，其出口宽带的需求量。</li>
<li>Percentage of requests served within a certain time（ms） 这部分数据用于描述每个请求处理时间的分布情况，比如以上测试，80%的请求处理时间都不超过6ms，这个处理时间是指前面的Time per request，即对于单个用户而言，平均每个请求的处理时间。</li>
</ul>
]]></content>
    
    
      <category term="ab测试" scheme="http://www.haozi520.com/tags/ab%E6%B5%8B%E8%AF%95/"/>
    
      <category term="ab" scheme="http://www.haozi520.com/tags/ab/"/>
    
      <category term="有技术" scheme="http://www.haozi520.com/categories/%E6%9C%89%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[需要生物技术及转基因食品的10大理由]]></title>
    <link href="http://www.haozi520.com/2014/06/17/knowledge-ten-reason-for-biotechnology-and-gmfood/"/>
    <id>http://www.haozi520.com/2014/06/17/knowledge-ten-reason-for-biotechnology-and-gmfood/</id>
    <published>2014-06-17T09:36:00.000Z</published>
    <updated>2014-06-17T10:12:46.000Z</updated>
    <content type="html"><![CDATA[<p>如今的网络已经像下水道般充斥着各种污名化生物技术、制造转基因恐慌的流言和谣言。反生物技术阵营的人们最常用的手段就是揭露所谓真相：生物技术公司伙同美国、欧盟等国的顶尖科学家以及国家监管机构，偷偷摸摸地大量生产转基因食品，意图毁灭整个世界的食物供应链。那么，关于生物技术的科学事实到底如何？</p>
<p><img src="http://haozi520.u.qiniudn.com/20140617175112.jpg" alt=""></p>
<h3 id="需要生物技术及转基因食品的10大理由">需要生物技术及转基因食品的10大理由</h3>
<p><img src="http://haozi520.u.qiniudn.com/20140617175212.jpg" alt=""></p>
<h4 id="生物技术作物能够帮助化解全球粮食危机">生物技术作物能够帮助化解全球粮食危机</h4>
<p>在过去的15年，生物技术已帮助农民多生产3.118亿吨粮食。</p>
<p>来源：<a href="www.croplife.org">www.croplife.org</a></p>
<h4 id="生物技术帮助小规模种植">生物技术帮助小规模种植</h4>
<p>种植生物技术作物的1700万农民中，有90%并不富裕，且种植的农田面积小于10公顷。在发展中国家，生物技术作物的增长至少比工业化国家速度快3倍、规模大5倍。</p>
<p><em>来源：<a href="http://www.isaaa.org" target="_blank">国际农业生物技术应用服务组织(ISAAA)</a>，<a href="http://nytimes.com/" target="_blank">《纽约时报》</a></em></p>
<h4 id="生物技术促进全球经济增长">生物技术促进全球经济增长</h4>
<p>生物技术作物带来的经济利益平均达130美元/公顷。在过去的16年，生物技术作物的种植面积增长了100倍、由170万公顷增加到1.7亿公顷。</p>
<p><em>来源：<a href="http://www.isaaa.org" target="_blank">国际农业生物技术应用服务组织(ISAAA)</a></em></p>
<h4 id="采用转基因作物的种植业减少化学药品的使用">采用转基因作物的种植业减少化学药品的使用</h4>
<p>生物技术作物每年能节省相当于263吨的杀虫剂，并使得流失到环境中的除草剂减少70%。</p>
<p><em>来源：<a href="http://www.isaaa.org" target="_blank">国际农业生物技术应用服务组织(ISAAA)</a>，PG Economics咨询公司</em></p>
<h4 id="生物技术作物增产">生物技术作物增产</h4>
<p>转基因作物的生产率,一些实例中比常规品种高7-20%（常规作物比有机作物平均高33%）。</p>
<p><em>来源：《自然》杂志，PG Economics</em></p>
<h4 id="生物技术作物帮助增加贫困农民的收入，消除贫困及营养不良">生物技术作物帮助增加贫困农民的收入，消除贫困及营养不良</h4>
<p>随着印度农民转基因棉花采用率的增长，收入得到增加，与之相对应的，卡路里消费也得到增加，家庭中营养不良的程度也有所下降。单是印度所有的非Bt使用者采用Bt技术一项，就能使食品安全缺乏保障的人口数下降15-20个百分点。</p>
<p><em>来源：<a href="http://www.natureasia.com" target="_blank">《自然》杂志</a>，PLOS</em></p>
<h4 id="采用生物技术作物的种植是可持续的">采用生物技术作物的种植是可持续的</h4>
<p>一般来说，转基因作物需要的农田劳作（例如耕耘）更少，这样可以在土壤中保留更多残渣，隔绝更多二氧化碳，从而减少温室气体的排放。在2011年，转基因作物的种植，相当于抵消了1020万辆小汽车一年的碳排放。（来源：PG Economics）</p>
<h4 id="生物技术改良的食物可安全食用">生物技术改良的食物可安全食用</h4>
<p>自从投放市场以来，超过25年的独立研究显示，没有证据证明食用转基因食物会对人类健康产生危害或者死亡。<br><em>来源：美国国家科学研究委员会, 欧盟委员会</em></p>
<h4 id="转基因粮食改善营养和健康">转基因粮食改善营养和健康</h4>
<p>增强维生素A的黄金大米、高含量胡萝卜素含量的芥末籽油、增强维生素A的木薯、营养强化的红薯、甚至包括可食用的疫苗——这些只是等待批准的新一代转基因作物中的一小部分。<br><em>来源：《植物生理学》杂志, 《美国营养学会志》, 盖茨基金会</em></p>
<h4 id="转基因作物和粮食是常规作物和有机农业的补充">转基因作物和粮食是常规作物和有机农业的补充</h4>
<p>独立科学家们认为转基因作物或动物不会“污染”或以任何形式危及食物供应、也不会产生危险的“木马基因”。</p>
<p><em>来源：NPR, 《自然》杂志, USDA</em></p>
]]></content>
    
    
      <category term="有文化" scheme="http://www.haozi520.com/tags/%E6%9C%89%E6%96%87%E5%8C%96/"/>
    
      <category term="有知识" scheme="http://www.haozi520.com/tags/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
      <category term="有知识" scheme="http://www.haozi520.com/categories/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[你对男孩穷养女孩富养有不同看法吗]]></title>
    <link href="http://www.haozi520.com/2014/06/15/poor-boy-raised-nutrient-rich-girl/"/>
    <id>http://www.haozi520.com/2014/06/15/poor-boy-raised-nutrient-rich-girl/</id>
    <published>2014-06-15T01:04:00.000Z</published>
    <updated>2014-06-15T01:43:53.000Z</updated>
    <content type="html"><![CDATA[<p>从来富贵多淑女，自古纨绔少伟男。自古以来，男孩穷养，女孩富养。这是中国人养儿育女的“金科玉律”。 穷养男孩，就是要苦其心志，劳其筋骨，这样的男孩才可以担当大任!富养女孩，就是要在物质上开阔其视野，精神上丰富其思想，这样的女孩才能独立自主、见多识广、高雅睿智、一生幸福！（<a href="http://baike.baidu.com/view/2338366.htm?fr=aladdin" target="_blank">参考百度</a>）<br><img src="http://haozi520.u.qiniudn.com/20140615093612.jpg" alt=""><br>李轶君写的《男孩穷养，女孩富养》这本书中分了好几篇幅来阐述为什么要男孩穷养女孩富养。<br>第一章阐述了男孩与女孩大脑结构的差异</p>
<blockquote>
<p>科学研究证明，男孩与女孩的大脑，无论是化学组织还是结构组织，先天就存在很多差异，比如，男孩大脑的发育速度明显慢于女孩大脑的发育速度。另外，男孩和女孩大脑结构上的一个明显差别是：男孩大脑的左右半球之间的联系要少于女孩的。在许多情况下，这些差异影响了男孩、女孩对环境的反应方式，以及因应压力事件的方式与记忆。</p>
</blockquote>
<p>第二章男孩的生长蓝图</p>
<blockquote>
<p>如果你有一个男孩，那么你真该好好了解他。男孩和女孩有很大不同，无论4岁、14岁还是24岁，男孩就是男孩，他们的世界根本就是另一个样子——充满挑战、争斗与危险。他们的想法、他们的做法、他们的需要以及该给他们什么，这些你都需要了解。这样你才能帮助他勾画好贯穿他生命的蓝图。</p>
</blockquote>
<p>第三章女孩的生长蓝图</p>
<blockquote>
<p>如果你有一个女孩，你一定希望她长得乖巧、可爱，生活得平安、幸福。可是，女孩的世界并不像表面看上去那么平静美丽，她们的生活中也有很多苦恼哀愁，她们的世界也时常暗流汹涌、充满危机。要想帮助你的女孩平安、健康地成长，就不能不了解她们的成长历程、知道她们需要什么，从而考虑给予她们怎样的帮助。</p>
</blockquote>
<p>书中用了很多篇幅来阐述来怎么培养一个了不起的儿子和怎样培养最完美的女儿不过有人持不同看法，<a href="http://www.xlxcn.net/archives/2860" target="_blank">世纪心里沙龙网</a>的<a href="http://weibo.com/chiyukai" target="_blank">迟毓凯</a>博士有以下看法：</p>
<blockquote>
<p>男女的不同养法根源在于社会分工，通俗点说，男人重在工作，穷养一些，让其知生活艰辛，有所担当，日后才能勤奋斗，干事业；女人重在家庭，富养一些，才能自我珍惜，自尊自爱，不过早受诱惑而堕落，最终嫁个好人家。从这个意义上说，穷养男孩，富养女孩是有一定道理的。</p>
<p>然而，任何教育命题的成立都有其前提条件，穷养男孩，富养女孩也不是适用于任何家庭中的任何小孩。有条件的家庭富养男孩，没条件的家庭穷养女孩亦有其成功者；而男孩穷养，也易生贪财势利的小人；女孩富养，也可成眼高手低之货色。网上有一个很有意思的案例：一对龙凤胎，男孩穷养，女孩富养。结果长大后，女孩娇生惯养，谁都看不上，大学毕业在家啃老；男孩，则直接让富婆给包养了。</p>
<p>穷养富养，要知其利弊，教育之事不能一概而论，不能按照标语口号育儿。教育孩子，因材施教才是王道。当然，做到这一点不容易，不过学校教育重点在于针对大多数，多顾及普遍性；而家庭教育之道才更应考虑根据自己孩子特点来找出应对之策，从这个意义上说，家长更难做，教育责任更重。</p>
</blockquote>
<p><strong>献给养育孩子的父母们</strong></p>
]]></content>
    
    
      <category term="有文化" scheme="http://www.haozi520.com/tags/%E6%9C%89%E6%96%87%E5%8C%96/"/>
    
      <category term="有知识" scheme="http://www.haozi520.com/tags/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
      <category term="有内涵" scheme="http://www.haozi520.com/tags/%E6%9C%89%E5%86%85%E6%B6%B5/"/>
    
      <category term="有知识" scheme="http://www.haozi520.com/categories/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这样写java事件驱动编程，是否可以]]></title>
    <link href="http://www.haozi520.com/2014/06/14/java-event-driver-program/"/>
    <id>http://www.haozi520.com/2014/06/14/java-event-driver-program/</id>
    <published>2014-06-14T10:19:00.000Z</published>
    <updated>2014-06-14T13:23:36.000Z</updated>
    <content type="html"><![CDATA[<p>java事件驱动模型主要是在swing上体现的比较多，但是现在在JDk和软件业发展迅速的情况下，事件驱动编程的需求也越来越或不可缺。作为一直用java编程的程序员，使用事件编程是理由有的思路。<br>思路：</p>
<ul>
<li>定义事件</li>
<li>定义监听器</li>
<li>定义事件源</li>
</ul>
<hr>
<h3 id="定义事件">定义事件</h3>
<p>在JDK API中java.util.EventObject,所有事件状态对象都将从其派生的根类。<br>所有 Event 在构造时都引用了对象 “source”，在逻辑上认为该对象是最初发生有关 Event 的对象。我们定义自己的事件状态对象继承java.util.EventObject</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> {</span>
    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;
    <span class="comment">//事件名称</span>
    <span class="keyword">private</span> String eName;
    <span class="keyword">public</span> <span class="title">AEvent</span>(Object source) {
        <span class="keyword">this</span>(source, <span class="keyword">null</span>);
    }
    <span class="keyword">public</span> <span class="title">AEvent</span>(Object source, String eName) {
        <span class="keyword">super</span>(source);
        <span class="keyword">this</span>.eName = eName;
    }
    <span class="keyword">public</span> String <span class="title">getEName</span>() {
        <span class="keyword">return</span> <span class="keyword">this</span>.eName;
    }
}
</code></pre><h3 id="定义监听器">定义监听器</h3>
<p>在JDK API中java.util.EventListener接口，JDK是这样描述的“所有事件侦听器接口必须扩展的标记接口”，我们定义一个事件监听器接口继承EventListener</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AListener</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">EventListener</span>{</span>
    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">performed</span>(AEvent e);
}
</code></pre><h3 id="定义事件源">定义事件源</h3>
<p>定义一个ASource，用Map来存储监听器<br>事件源：</p>
<ul>
<li>可以增加、删除事件</li>
<li>可以监听事件</li>
<li>可以触发被监听到的事件</li>
</ul>
<hr>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASource</span>{</span>
    <span class="keyword">private</span> 
    Map&lt;String, AListener&gt; alisteners = <span class="keyword">new</span> HashMap&lt;String, AListener&gt;();
    <span class="javadoc">/**
    *模拟出发事件
    */</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trigger</span>(String eName) {
        <span class="keyword">if</span> (alisteners.containsKey(eName)) {
            AEvent evt = <span class="keyword">new</span> AEvent(<span class="keyword">this</span>, eName);
            <span class="comment">// 如果值改变的话,就触发事件</span>
            fireAEvent(evt, eName);
        }
    }
    <span class="javadoc">/**
    *定义出发事件
    */</span>
    <span class="keyword">public</span> Map&lt;String, AListener&gt; <span class="title">getAllAListener</span>() {
        <span class="keyword">return</span> <span class="keyword">this</span>.alisteners;
    }
    <span class="javadoc">/**
    *获取事件监听器
    */</span>
    <span class="keyword">public</span> AListener <span class="title">getAListener</span>(String eName) {
        <span class="keyword">return</span> alisteners.get(eName);
    }
    <span class="javadoc">/**
    *添加事件
    */</span>
    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addAListener</span>(String eName, AListener a) {
        <span class="keyword">if</span> (eName != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(eName.trim()) &amp;&amp; a != <span class="keyword">null</span>) {
            alisteners.put(eName, a);
        }
    }
    <span class="javadoc">/**
    *删除监听器
    */</span>
    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeAListener</span>(String eName) {
        alisteners.remove(eName);
    }
    <span class="javadoc">/**
    *调用监听器处理事件
    */</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireAEvent</span>(AEvent evt, String eName) {
        alisteners.get(eName).performed(evt);
    }
}
</code></pre><h3 id="编写测试">编写测试</h3>
<p>编写个测试类Test</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Test{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        ASource <span class="keyword">as</span>=<span class="keyword">new</span> ASource();
        <span class="keyword">as</span>.addAListener(<span class="string">"add"</span>,<span class="keyword">new</span> AListener(){
            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performed</span>(AEvent e) {
                System.<span class="keyword">out</span>.println(e.getEName());
            }
        });
        <span class="comment">//模拟出发事件</span>
        <span class="keyword">as</span>.trigger(<span class="string">"add"</span>);
    }
}
</code></pre>]]></content>
    
    
      <category term="java" scheme="http://www.haozi520.com/tags/java/"/>
    
      <category term="事件驱动" scheme="http://www.haozi520.com/tags/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="java" scheme="http://www.haozi520.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个句柄无效引发的思考]]></title>
    <link href="http://www.haozi520.com/2014/06/13/java-write-file-in-thread/"/>
    <id>http://www.haozi520.com/2014/06/13/java-write-file-in-thread/</id>
    <published>2014-06-13T04:22:00.000Z</published>
    <updated>2014-06-13T06:36:50.000Z</updated>
    <content type="html"><![CDATA[<p>今天在用java多线模拟并发用户请求，想把报告写到文件中后分析，可是写完代码后总是报“java.io.IOException: 句柄无效”，可能是多线程的原因</p>
<h3 id="有问题的代码如下">有问题的代码如下</h3>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPressTest</span> {</span>
    <span class="keyword">private</span> ExecutorService exec = <span class="keyword">null</span>;
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {
        HttpPressTest h=<span class="keyword">new</span> HttpPressTest();
        h.commit();
        h.closeExe();
    }
    <span class="keyword">public</span> <span class="title">HttpPressTest</span>() {
        <span class="keyword">int</span> cpu = Runtime.getRuntime().availableProcessors();
        exec = Executors.newFixedThreadPool(cpu);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span>(){
        <span class="keyword">final</span> FileOutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(
                    <span class="string">"D:\\temp\\report.txt"</span>));
            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">1000000</span>; index++) {
                <span class="keyword">final</span> <span class="keyword">int</span> NO = index;
                Runnable run = <span class="keyword">new</span> Runnable() {
                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {
                        <span class="keyword">try</span> {
                            <span class="keyword">long</span> time1 = System.currentTimeMillis();
                            URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:8080/hello"</span>);
                            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(
                                    url.openStream());
                            <span class="keyword">long</span> time2 = System.currentTimeMillis();
                            os.write((<span class="string">"Thread "</span> + NO + <span class="string">" time:"</span> + (time2 - time1) + <span class="string">"ms\n"</span>)
                                    .getBytes());
                            os.flush();
                            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);
                            String str;
                            <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {
                                System.out.println(str);
                            }
                            br.close();
                            isr.close();
                        } <span class="keyword">catch</span> (Exception e) {
                            e.printStackTrace();
                        }
                    }
                };
                exec.execute(run);
            }
        os.flush();
        os.close();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeExe</span>() {
        exec.shutdown();
    }
}
</code></pre><p>这段代码看似没问题，但是你执行后就会告诉你“java.io.IOException: 句柄无效”，分析了下Runnable实例run在ExecutorService执行时是异步的，还没等到所有的Runnable执行完毕FileOutputStream就Close掉了造成IO异常。既然os放在外面会因为关闭而导致异常，那能不能放在里面呢？我测了一下</p>
<h3 id="第一次修改">第一次修改</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> HttpPressTest {
    <span class="keyword">private</span> ExecutorService exec = <span class="keyword">null</span>;
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) throws Exception {
        HttpPressTest h=<span class="keyword">new</span> HttpPressTest();
        h.commit();
        h.closeExe();
    }
    <span class="keyword">public</span> <span class="title">HttpPressTest</span>() {
        <span class="keyword">int</span> cpu = Runtime.getRuntime().availableProcessors();
        exec = Executors.newFixedThreadPool(cpu);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span>(){
        <span class="keyword">int</span> cpu=Runtime.getRuntime().availableProcessors();
        ExecutorService exec = Executors.newFixedThreadPool(cpu);
            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">100000</span>; index++) {
                final <span class="keyword">int</span> NO = index;
                Runnable run = <span class="keyword">new</span> Runnable() {
                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {
                        OutputStream os = <span class="keyword">null</span>;
                        <span class="keyword">try</span> {
                            os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(
                                    <span class="string">"D:\\temp\\report.txt"</span>),<span class="keyword">true</span>);
                            <span class="keyword">long</span> time1 = System.currentTimeMillis();
                            URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:8080/hello"</span>);
                            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(
                                    url.openStream());
                            <span class="keyword">long</span> time2 = System.currentTimeMillis();
                            os.write((<span class="string">"Thread "</span> + NO + <span class="string">" time:"</span> + (time2 - time1) + <span class="string">"ms\n"</span>)
                                    .getBytes());
                            os.flush();
                            os.close();
                            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);
                            String str;
                            <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {
                                System.<span class="keyword">out</span>.println(str);
                            }
                            br.close();
                            isr.close();
                        } <span class="keyword">catch</span> (Exception e) {
                            e.printStackTrace();
                        }
                    }
                };
                exec.execute(run);
            }
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeExe</span>() {
        exec.shutdown();
    }
}
</code></pre><p>这样修改后确实没问题，但是代码里面使用的文件流一开一关造成了IO资源的浪费，可能会造成以后高并发暂用资源，影响测试准确率，有没有别的办法修改这种情况呢？</p>
<p>多线程中有个submit方法返回Future能判断线程是否执行完毕，只要执行完毕的我们就把报告写道文件中，为完毕的等待。</p>
<h3 id="第二次修改">第二次修改</h3>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpPressTest</span> {</span>
    <span class="keyword">private</span> ExecutorService exec = <span class="keyword">null</span>;
    <span class="keyword">private</span> List&lt;Future&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Future&lt;String&gt;&gt;();
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> Exception {
        HttpPressTest h = <span class="keyword">new</span> HttpPressTest();
        h.commit();
    }
    <span class="keyword">public</span> <span class="title">HttpPressTest</span>() {
        <span class="keyword">int</span> cpu = Runtime.getRuntime().availableProcessors();
        exec = Executors.newFixedThreadPool(cpu);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span>() {
        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; <span class="number">100000</span>; index++) {
            <span class="keyword">final</span> <span class="keyword">int</span> NO = index;
            Future&lt;String&gt; f = exec.submit(<span class="keyword">new</span> Callable&lt;String&gt;() {
                <span class="annotation">@Override</span>
                <span class="keyword">public</span> String <span class="title">call</span>() <span class="keyword">throws</span> Exception {
                    <span class="keyword">try</span> {
                        <span class="keyword">long</span> time1 = System.currentTimeMillis();
                        URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:8080/hello"</span>);
                        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(url
                                .openStream());
                        <span class="keyword">long</span> time2 = System.currentTimeMillis();
                        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);
                        String str;
                        <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {
                            System.out.println(str);
                        }
                        br.close();
                        isr.close();
                        <span class="keyword">return</span> <span class="string">"Thread "</span> + NO + <span class="string">" time:"</span> + (time2 - time1)
                                + <span class="string">"ms\n"</span>;
                    } <span class="keyword">catch</span> (Exception e) {
                        e.printStackTrace();
                    }
                    <span class="keyword">return</span> <span class="keyword">null</span>;
                }
            });
            list.add(f);
        }
        writeFile();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span>() {
        FileOutputStream os = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D:\\temp\\report.txt"</span>));
            <span class="keyword">for</span> (Future&lt;String&gt; fs : list) {
                os.write(fs.get().getBytes());
                os.flush();
            }
        } <span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        } <span class="keyword">finally</span> {
            <span class="keyword">if</span> (os != <span class="keyword">null</span>) {
                <span class="keyword">try</span> {
                    os.flush();
                    os.close();
                } <span class="keyword">catch</span> (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeExe</span>() {
        exec.shutdown();
    }
}
</code></pre><p>在刚在的例子中，writeFile()方法的实现过程中，迭代了Future的数组，如果任务还没有完成则当前线程会阻塞，如果我们希望任意字任务完成后就把其结果写到文件中，而不用依次等待每个任务完成，可以使CompletionService。生产者submit()执行的任务。使用者take()已完成的任务，并按照完成这些任务的顺序处理它们的结果。也就是调用CompletionService的take方法是，会返回按完成顺序放回任务的结果，CompletionService内部维护了一个阻塞队列BlockingQueue，如果没有任务完成，take()方法也会阻塞。修改刚才的例子使用CompletionService</p>
<h3 id="第三次修改">第三次修改</h3>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> HttpPressTest {
    <span class="keyword">private</span> ExecutorService exec = <span class="keyword">null</span>;
    <span class="keyword">private</span> <span class="keyword">int</span> MAX = <span class="number">1000000</span>;
    <span class="keyword">private</span> ExecutorCompletionService&lt;String&gt; completionService = <span class="keyword">null</span>;
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) throws Exception {
        HttpPressTest h = <span class="keyword">new</span> HttpPressTest();
        h.commit();
        h.closeExe();
    }
    <span class="keyword">public</span> <span class="keyword">class</span> InnerPressTest implements Callable&lt;String&gt; {
        <span class="keyword">private</span> <span class="keyword">int</span> NO;
        <span class="keyword">public</span> <span class="title">InnerPressTest</span>(<span class="keyword">int</span> index) {
            NO = index;
        }
        @Override
        <span class="keyword">public</span> String <span class="title">call</span>() throws Exception {
            <span class="keyword">try</span> {
                <span class="keyword">long</span> time1 = System.currentTimeMillis();
                URL url = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:8080/hello"</span>);
                InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(url.openStream());
                <span class="keyword">long</span> time2 = System.currentTimeMillis();
                BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);
                String str;
                <span class="keyword">while</span> ((str = br.readLine()) != <span class="keyword">null</span>) {
                    System.<span class="keyword">out</span>.println(str);
                }
                br.close();
                isr.close();
                <span class="keyword">return</span> <span class="string">"Thread "</span> + NO + <span class="string">" time:"</span> + (time2 - time1) + <span class="string">"ms\n"</span>;
            } <span class="keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
            <span class="keyword">return</span> <span class="keyword">null</span>;
        }
    }
    <span class="keyword">public</span> <span class="title">HttpPressTest</span>() {
        <span class="keyword">int</span> cpu = Runtime.getRuntime().availableProcessors();
        exec = Executors.newFixedThreadPool(cpu);
        completionService = <span class="keyword">new</span> ExecutorCompletionService&lt;String&gt;(exec);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span>() {
        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; MAX; index++) {
            InnerPressTest innerPressTest = <span class="keyword">new</span> InnerPressTest(index);
            <span class="keyword">if</span> (!exec.isShutdown()) {
                completionService.submit(innerPressTest);
            }
        }
        writeFile();
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span>() {
        FileOutputStream os = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D:\\temp\\report.txt"</span>));
            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) {
                os.write(completionService.take().<span class="keyword">get</span>().getBytes());
                os.flush();
            }
        } <span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        } <span class="keyword">finally</span> {
            <span class="keyword">if</span> (os != <span class="keyword">null</span>) {
                <span class="keyword">try</span> {
                    os.flush();
                    os.close();
                } <span class="keyword">catch</span> (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeExe</span>() {
        exec.shutdown();
    }
}
</code></pre><h3 id="总结">总结</h3>
<p>多线程是好用，但是要理解其中的原理，整理下多线程特性</p>
<h4 id="创建线程池">创建线程池</h4>
<p>Executors类，提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口。</p>
<ul>
<li>public static ExecutorService newFixedThreadPool(int nThreads) public static - ExecutorService newFixedThreadPool(int nThreads) 创建固定数目线程的线程池。</li>
<li>public static ExecutorService newCachedThreadPool() 创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</li>
<li>public static ExecutorService newSingleThreadExecutor()创建一个单线程化的<br>Executor。</li>
<li>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来</li>
<li>替代Timer类。</li>
</ul>
<h4 id="ExecutorService与生命周期">ExecutorService与生命周期</h4>
<p>ExecutorService扩展了Executor并添加了一些生命周期管理的方法。一个Executor的生命周期有三种状态，运行，关闭，终止。Executor创建时处于运行状态。当调用ExecutorService.shutdown()后，处于关闭状态，isShutdown()方法返回true。这时，不应该再想Executor中添加任务，所有已添加的任务执行完毕后，Executor处于终止状态，isTerminated()返回true。如果Executor处于关闭状态，往Executor提交任务会抛出unchecked exception RejectedExecutionException。</p>
<h4 id="使用Callable，Future返回结果">使用Callable，Future返回结果</h4>
<p>Future<V>代表一个异步执行的操作，通过get()方法可以获得操作的结果，如果异步操作<br>还没有完成，则get()会使当前线程阻塞。FutureTask<V>实现了Future<V>和Runable<V>。<br>Callable代表一个有返回值得操作。<br>ExecutoreService提供了submit()方法，传递一个Callable，或Runnable，返回Future。如果Executor后台线程池还没有完成Callable的执行，这调用返回Future对象的get()方法，会阻塞直到执行完成</p>
<h4 id="CompletionService">CompletionService</h4>
<p>如果我们希望任意任务完成后就把其结果处理掉，而不用依次等待每个任务完成，可以使CompletionService。生产者submit()执行的任务。使用者take()已完成的任务，并按照完成这些任务的顺序处理它们的结果。也就是调用CompletionService的take方法是，会返回按完成顺序放回任务的结果，CompletionService内部维护了一个阻塞队列BlockingQueue，如果没有任务完成，take()方法也会阻塞</p>
]]></content>
    
    
      <category term="java" scheme="http://www.haozi520.com/tags/java/"/>
    
      <category term="线程" scheme="http://www.haozi520.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="文件" scheme="http://www.haozi520.com/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="句柄无效" scheme="http://www.haozi520.com/tags/%E5%8F%A5%E6%9F%84%E6%97%A0%E6%95%88/"/>
    
      <category term="java" scheme="http://www.haozi520.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[喝蜂蜜注意哪些事项？]]></title>
    <link href="http://www.haozi520.com/2014/06/12/knowledge-honey-attentions/"/>
    <id>http://www.haozi520.com/2014/06/12/knowledge-honey-attentions/</id>
    <published>2014-06-12T09:20:12.000Z</published>
    <updated>2014-06-12T09:40:28.000Z</updated>
    <content type="html"><![CDATA[<p>蜂蜜是我们家喻户晓的一个营养品，但是吃起来也是很有讲究的，早上晚上喝蜂蜜水都需要注意以下几点<br><img src="http://haozi520.u.qiniudn.com/20140612172923.png" alt=""></p>
<h3 id="不能用开水冲或高温蒸煮蜂蜜">不能用开水冲或高温蒸煮蜂蜜</h3>
<p><strong>解惑：</strong></p>
<blockquote>
<p>蜂蜜中除含65%至80%的葡萄糖和果糖外，还含有丰富的酶、维生素、矿物质等。食用蜂蜜时，要用温水冲饮，水温不超过60℃为宜。如果高温开水冲入蜂蜜，不仅破坏了其丰富的营养物质，还会导致其天然的色、香、味都发生变化。</p>
<p>喝蜂蜜水对水温是有讲究的。医学大家李时珍在《本草纲目》中记载“蜂蜜入药之功有五：清热也；补中也；润燥也；解毒也；止痛也。生则性凉，故能清热。熟则性温，故能补中。”可见，较凉的蜂蜜水具有清热、润燥、解毒的功效，比较适合于体质偏热的人；而温热的蜂蜜水（40至60度）具有补益脾胃、促进消化的功效，比较适合于脾胃虚弱的人。</p>
</blockquote>
<h3 id="清晨空腹第一杯就饮用蜂蜜水，不利健康">清晨空腹第一杯就饮用蜂蜜水，不利健康</h3>
<p><strong>解惑：</strong></p>
<blockquote>
<p>蜂蜜水中含有相应的糖分，不是以单纯水的形式存在。饮用后，蜜中的果糖要经过人体代谢转化为葡萄糖，才能被人体所吸收利用，这样失去了清晨第一杯水清扫身体内环境的作用。</p>
<p>而且，蜂蜜作为第一杯水，不能有效地补充机体细胞的水分，排尿时间比白开水相对减缓，降低体内排毒的功效。此时的体内没有清除废弃物，又来接受新的物质，那么新物质与一夜代谢的废弃残渣混合，就呈现了体内新旧杂合物质的代谢吸收过程，不能很好地获取蜂蜜的营养物质，残渣的再次代谢更不利于健康。</p>
<p>所以，在清晨饮用完白开水后，体内相对洁净了，再食用蜂蜜就更有利于发挥其防治功效。为了不影响早餐的食欲，可以将蜂蜜直接食用或与面包等一起食用，还可以与酸奶、果蔬汁等混合食用。</p>
</blockquote>
<h3 id="晚上睡觉前不能喝蜂蜜水">晚上睡觉前不能喝蜂蜜水</h3>
<p><strong>解惑：</strong></p>
<blockquote>
<p>晚上睡觉之前，宜在睡前半小时再喝一杯100ml左右的温开水，但此时并不适宜喝蜂蜜水。这是因为晚上睡前喝白开水是为了身体一夜新陈代谢作水分储备，但如果喝了蜂蜜水，水中含有大量溶质，密度上升，达不到睡前喝水的作用，因此不予推荐。另外，蜂蜜中含有大量的糖分，如果晚上睡觉之前喝了蜂蜜水，这些糖分极容易转换成脂肪堆积在身体里，让你悄悄长胖！</p>
<p>如果刷了牙再喝蜂蜜水就更糟糕了，大量的细菌会在你的口腔里腐蚀你的牙齿，因此晚上睡前喝蜂蜜水委实太不划算！</p>
</blockquote>
]]></content>
    
    
      <category term="有知识" scheme="http://www.haozi520.com/tags/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
      <category term="蜂蜜" scheme="http://www.haozi520.com/tags/%E8%9C%82%E8%9C%9C/"/>
    
      <category term="有知识" scheme="http://www.haozi520.com/categories/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[老是遗忘的crontab配置]]></title>
    <link href="http://www.haozi520.com/2014/06/12/linux-crontab-configuration/"/>
    <id>http://www.haozi520.com/2014/06/12/linux-crontab-configuration/</id>
    <published>2014-06-12T02:54:00.000Z</published>
    <updated>2014-06-12T04:23:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>很多情况下，都需要在linux系统中定制一些定时任务自动完成操作，而我总是会忘记一些配置项，今天就好好整理下，在linux中crontab的配置</p>
</blockquote>
<h3 id="任务调度分类">任务调度分类</h3>
<ul>
<li>系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li>
<li>个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li>
</ul>
<h3 id="权限文件">权限文件</h3>
<ul>
<li>/etc/cron.deny 该文件中所列的用户不允许使用Crontab命令</li>
<li>/etc/cron.allow 该文件中所列的用户允许使用Crontab命令</li>
<li>/var/spool/cron/ 是所有用户的crontab文件 </li>
</ul>
<h3 id="crontab命令">crontab命令</h3>
<p>Crontab命令的格式为：crontab –l|-r|-e|-i [username]</p>
<ul>
<li>-l 显示用户的Crontab文件的内容,eg:crontab -l</li>
<li>-i 删除用户的Crontab文件前给提示,eg:crontab -ri</li>
<li>-r 从Crontab目录中删除用户的Crontab文件,eg:crontab -r</li>
<li>e 编辑用户的Crontab文件,eg:crontab -e</li>
</ul>
<p><em>用户所建立的Crontab文件存于/var/spool/cron中，其文件名与用户名一致。</em></p>
<h3 id="crontab格式">crontab格式</h3>
<p>它的格式共分为六段，前五段为时间设定段，第六段为所要执行的命令段，<br>格式如下：<em> </em> <em> </em> * </p>
<pre><code>.------------- minute (<span class="number">0</span>-<span class="number">59</span>) 
|  .---------- hour (<span class="number">0</span>-<span class="number">23</span>)
|  |  .------- day of month (<span class="number">1</span>-<span class="number">31</span>)
|  |  |  .---- month (<span class="number">1</span>-<span class="number">12</span>) OR jan,feb,mar,apr <span class="keyword">...</span>
|  |  |  |  .- day of week(<span class="number">0</span>-<span class="number">6</span>)(Sunday=0or7) OR sun,mon,tue,wed,thu,fri,sat
|  |  |  |  |
*  *  *  *  * user-name command to be executed
</code></pre><h3 id="举例">举例</h3>
<ul>
<li>0 17 <em> </em> 1-5 mail -s “hi” alex@domain.name&gt;/dev/null 2&gt;&amp;1 周一到周五每天下午 5:00 寄一封信给 alex@domain.name</li>
<li>0 6-12/3 <em> 12 </em> /usr/bin/backup  在 12 月内, 每天的早上 6 点到 12 点中，每隔 20 分钟执行一次 /usr/bin/backup</li>
<li>0 <em>/2 </em> <em> </em> /sbin/service httpd restart  意思是每两个小时重启一次apache</li>
<li>50 7 <em> </em> * /sbin/service sshd start  意思是每天7：50开启ssh服务</li>
<li>50 22 <em> </em> * /sbin/service sshd stop  意思是每天22：50关闭ssh服务</li>
<li>0 0 1,15 <em> </em> fsck /home  每月1号和15号检查/home 磁盘</li>
<li>1 <em> </em> <em> </em> /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件</li>
<li>00 03 <em> </em> 1-5 find /home “*.xxx” -mtime +4 -exec rm {} \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</li>
<li>30 6 <em>/10 </em> * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</li>
</ul>
]]></content>
    
    
      <category term="linux" scheme="http://www.haozi520.com/tags/linux/"/>
    
      <category term="crontab" scheme="http://www.haozi520.com/tags/crontab/"/>
    
      <category term="linux" scheme="http://www.haozi520.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[王八和王八蛋]]></title>
    <link href="http://www.haozi520.com/2014/06/11/%E7%8E%8B%E5%85%AB%E5%92%8C%E7%8E%8B%E5%85%AB%E7%9A%84%E8%9B%8B/"/>
    <id>http://www.haozi520.com/2014/06/11/王八和王八的蛋/</id>
    <published>2014-06-11T09:20:12.000Z</published>
    <updated>2014-06-11T08:45:49.000Z</updated>
    <content type="html"><![CDATA[<p>相信很多人都骂过别人王八蛋，相信很多人见过王八，但是真正见过王八的蛋的人应该很少，今天给大家看看这个王八和他的蛋吧</p>
<p><img src="http://haozi520.u.qiniudn.com/20140611163757.jpg" alt=""></p>
<p><img src="http://haozi520.u.qiniudn.com/20140611163825.jpg" alt=""></p>
<p><img src="http://haozi520.u.qiniudn.com/20140611163832.jpg" alt=""></p>
<p><img src="http://haozi520.u.qiniudn.com/20140611163838.jpg" alt=""></p>
]]></content>
    
    
      <category term="王八" scheme="http://www.haozi520.com/tags/%E7%8E%8B%E5%85%AB/"/>
    
      <category term="王八蛋" scheme="http://www.haozi520.com/tags/%E7%8E%8B%E5%85%AB%E8%9B%8B/"/>
    
      <category term="收藏" scheme="http://www.haozi520.com/categories/%E6%94%B6%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何成为优秀的程序员]]></title>
    <link href="http://www.haozi520.com/2014/06/09/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%BC%98%E7%A7%80%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    <id>http://www.haozi520.com/2014/06/09/如何成为优秀的程序员/</id>
    <published>2014-06-09T10:20:12.000Z</published>
    <updated>2014-06-09T10:03:17.000Z</updated>
    <content type="html"><![CDATA[<p><em>原文：<a href="http://www.csdn.net/article/2014-06-09/2820135" target="_blank">http://www.csdn.net/article/2014-06-09/2820135</a></em></p>
<p>作为程序员，价值的实现不是通过你知道些什么来衡量，而是通过你做出的设计来衡量。虽然两者之间存在联系，但并不相同。那么，如何才能成为伟大的程序员？</p>
<h3 id="发现问题要及时解决">发现问题要及时解决</h3>
<p>程序员在编写代码时，遇到真正的难题很少，也很少有专门做技术的公司。要想成为优秀的程序员，第一步就是要解决之前遇到过的难题。遇到有问题的代码而不去解决的程序员不是好程序员。无论你是Ruby、Nodejs、Angular还是其他开发人员，遇到问题一定要解决。<br><img src="http://cms.csdnimg.cn/article/201406/09/5395688962841.jpg" alt=""></p>
<h3 id="从代码中学习">从代码中学习</h3>
<p>我发现很多程序员的编码水平都达到了一个稳定值，因为他们还没有找到可以提高他们编码水平的方法，这是一件很糟糕的事。怎样才能提高自己的编码水平？最简单的方法就是从好的、不好的代码中学习。通过长期积累，你应该可以分辨出哪些代码值得你学习。</p>
<h3 id="态度端正">态度端正</h3>
<p>一个好的程序要确保自己写出的代码能够正常运行，在写代码过程中，态度一定要端正。如果不端正的话，会影响到你写代码的速度和质量，同时也会造成Bug，说不定还会惹怒你的领导。</p>
<h3 id="适量测试">适量测试</h3>
<p>测试是一种有力的工具，就像战士穿铠甲一样，穿得越多，越不容易失败；越不害怕失败，你做得就会多，进步的空间也比较大。但到底什么才是适量的测试？对此没有明确的回答，依情况来定。测试是你需要学习的另一个新的专业知识，要多花时间思考哪些东西需要做测试，怎样才能做好测试。</p>
<h3 id="每天至少花四个小时来认真做本分工作">每天至少花四个小时来认真做本分工作</h3>
<p>大多数程序员喜欢讨论优化自己、关注黑客等，其实你根本不需要做这些来提高工作效率，最根本的是要每天坚持做自己的本分工作。每天至少花4个小时的时间认真做好自己的本职工作，这并不是一件容易的事情，如果长期坚持下去的话，势必会成为团队最优秀的成员之一。</p>
<p>记录有价值的代码并与团队分享：培养记录有价值代码的习惯，记录下来之后，还应该花时间与你的团队成员分享，互相学习。在编程过程中，遇到的最糟糕的事就是修复Bug。分享可以有效降低出现这种事情的概率。</p>
<h3 id="使团队更优秀">使团队更优秀</h3>
<p>你的出现使团队变得更优秀还是更糟糕？你编写代码、编制文档和你的技术能力帮助到队友了吗？你是否经常鼓励队友，使他们为成为优秀的程序员努力？你应该想尽办法使团队变得更优秀，比如在工作上帮助他们。要记住，只有你一个人“聪明”并不聪明。</p>
<p>其实，作为一个优秀的程序员，不在于你有多聪明或者有很多理论知识，也和你从哪个大学毕业无关。你是一个怎样的程序员最终只由你所做出来的工作以及身边人对你的评价决定。所以，要想成为一名优秀的程序员，继续加油吧！</p>
]]></content>
    
    
      <category term="程序员" scheme="http://www.haozi520.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="有理想" scheme="http://www.haozi520.com/tags/%E6%9C%89%E7%90%86%E6%83%B3/"/>
    
      <category term="有理想" scheme="http://www.haozi520.com/categories/%E6%9C%89%E7%90%86%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang中new和make的区别]]></title>
    <link href="http://www.haozi520.com/2014/06/09/Golang%E4%B8%ADnew%E5%92%8Cmake%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.haozi520.com/2014/06/09/Golang中new和make的区别/</id>
    <published>2014-06-09T09:20:12.000Z</published>
    <updated>2014-06-10T06:54:02.000Z</updated>
    <content type="html"><![CDATA[<p>刚学go的人，在看源码或别人的代码时都会头晕，有的时候用new创建变量，有的时候用make创建，一下整理几点</p>
<h3 id="总结几点">总结几点</h3>
<ul>
<li>new会分配结构空间，并初始化为清空为零，不进一步初始化</li>
<li>new之后需要一个指针来指向这个结构</li>
<li>make会分配结构空间及其附属空间，并完成其间的指针初始化</li>
<li>make返回这个结构空间，不另外分配一个指针</li>
</ul>
<h3 id="例子new">例子new</h3>
<p>var p *[]int = new([]int)<br>或p := new([]int)<br>以上分配了一个slice结构，但是结构中的应该指向底层数组的ptr指针为空，故实际不能往这个slice里面存取数据<br>同时分配了一个指针p，也即(在32位系统中)占4个字节并存放slice结构的地址</p>
<h3 id="例子make">例子make</h3>
<p>var v []int = make([]int, 0)<br>v := make([]int, 0)<br>以上分配了一个slice结构，且结构中的应该指向底层数组的ptr指针已经指向了某个底层数组，这个底层数组应该已经分配了，故这个slice已经可以使用了<br>注意v就是这个slice结构，而不是一个指向slice的指针<br>上述仅是示例，一般使用时都会明确长度和容量：v := make([]int, 10, 50)</p>
<h3 id="结论">结论</h3>
<p>由上可见，用new来分配slice的意义不大，因为没有恰当的初始化，无法直接使用<br>有附带空间的结构，使用make来初始化，可以完成内部指针初始化，其后可以立即使用</p>
]]></content>
    
    
      <category term="go" scheme="http://www.haozi520.com/tags/go/"/>
    
      <category term="golang" scheme="http://www.haozi520.com/tags/golang/"/>
    
      <category term="go" scheme="http://www.haozi520.com/categories/go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golang环境变量及工作空间配置]]></title>
    <link href="http://www.haozi520.com/2014/06/09/Golang%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8A%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.haozi520.com/2014/06/09/Golang环境变量及工作空间配置/</id>
    <published>2014-06-09T09:20:12.000Z</published>
    <updated>2014-06-11T07:29:32.000Z</updated>
    <content type="html"><![CDATA[<p>最近看到很多文章关于GO环境的配置，那么go需要配置哪些环境变量呢？根据官方文档GOPATH,GOROOT,GOBIN,GOOS的go环境变量配置</p>
<h3 id="说明">说明</h3>
<p>GOROOT go的安装目录<br>GOBIN go安装目录下的bin目录，里面有可执行的程序<br>GOOS  这个变量是在编译代码时使用的<br>GOPATH 开发的工作目录<br><em>（注：这个不是Go安装目录）</em></p>
<h3 id="下载安装包">下载安装包</h3>
<p>windows默认安装在C:\go<br>linux和UNIX之类系统可指定安装目录</p>
<h3 id="windows下配置">windows下配置</h3>
<p>在环境变量中新建<br>GOROOT = C:\go<br>GOBIN = C:\go\bin<br>GOPATH = E:\workcode\golang<br>并在PATH中添加 %GOBIN%;%GOPATH%</p>
<p><img src="http://haozi520.u.qiniudn.com/20140609160405.png" alt=""></p>
<h3 id="linux和UNIX下配">linux和UNIX下配</h3>
<h4 id="编辑用户目录下的-bashrc文件(其他用户无权操作)">编辑用户目录下的.bashrc文件(其他用户无权操作)</h4>
<p>在文件末尾添加如下语句<br>export GOROOT = $home/go<br>export GOBIN = $GOROOT/bin<br>export GOPATH = $home/app/mygo<br>export PATH = $PATH:$GOBIN:$GOPATH</p>
<p><em>编辑完后执行：source .bashrc 是环境变量生效</em></p>
<h4 id="编辑/etc/profile文件">编辑/etc/profile文件</h4>
<p>在文件末尾添加如下语句<br>export GOROOT = $home/go<br> export GOBIN = $GOROOT/bin<br> export GOPATH = $home/app/mygo<br> export PATH = $PATH:$GOBIN:$GOPATH</p>
<p><em>编辑完后执行：source /etc/profile 是环境变量生效</em></p>
<h3 id="创建工作空间">创建工作空间</h3>
<p>在设定的GOPATH路径下创建三个目录：<br> src 存放源代码（比如：.go .c .h .s等）<br> pkg 编译后生成的文件（比如：.a）<br> bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中）</p>
<h3 id="应用结构目录">应用结构目录</h3>
<p>建立包和目录：$GOPATH/src/mymath/sqrt.go(包名：mymath)</p>
<p>以后自己新建应用或者一个代码包都是在src目录下新建一个文件夹，文件夹名称一般是代码包名称，当然也允许多级目录.</p>
<pre><code>例如在src下面新建了目录
$GOPATH/src/github<span class="preprocessor">.com</span>/lauking/blog, 
那么这个包路径就是“/github<span class="preprocessor">.com</span>/lauking/blog ”，
包名称是最后一个目录blog
</code></pre><p>执行如下代码 sh cd $GOPATH/src mkdir mymath 新建文件sqrt.go，内容如下 </p>
<pre><code><span class="keyword">go</span> <span class="comment">//</span>
$GOPATH/src/mymath/sqrt.<span class="keyword">go</span>源码如下： <span class="keyword">package</span> mymath
<span class="keyword">func</span> Sqrt(x <span class="typename">float64</span>) <span class="typename">float64</span> {
    z :=<span class="number"> 0.0</span>
    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 1000</span>; i++ {
        z -= (z*z - x) / <span class="number">(2</span> * x)
    }
    <span class="keyword">return</span> z
}
</code></pre><p>这样我的应用包目录和代码已经新建完毕，注意：一般建议package的名称和目录名保持一致</p>
]]></content>
    
    
      <category term="go" scheme="http://www.haozi520.com/tags/go/"/>
    
      <category term="golang" scheme="http://www.haozi520.com/tags/golang/"/>
    
      <category term="go" scheme="http://www.haozi520.com/categories/go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从叛逆者到大英雄：孙悟空个性心理分析]]></title>
    <link href="http://www.haozi520.com/2014/06/07/%E4%BB%8E%E5%8F%9B%E9%80%86%E8%80%85%E5%88%B0%E5%A4%A7%E8%8B%B1%E9%9B%84-%E5%AD%99%E6%82%9F%E7%A9%BA%E4%B8%AA%E6%80%A7%E5%BF%83%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>http://www.haozi520.com/2014/06/07/从叛逆者到大英雄-孙悟空个性心理分析/</id>
    <published>2014-06-07T09:20:12.000Z</published>
    <updated>2014-06-07T09:27:59.000Z</updated>
    <content type="html"><![CDATA[<p>《西游记》是中国古典四大文学名著之一，其中的故事更是脍炙人口。然而，就象著名的认知疗法ABC中常常提到的，同样的事物，从不同的角度来看，会有不同的心情。对《西游记》的阅读也是如此，革命家从这本书看到了造反和革命；宗教家从这本书看到了儒道佛的交融；老人从这本书看到了人生，孩子从这本书看到了诙谐，电影人则从这本书中看到了爱情（见《大话西游》）。“道士说，这部书是一部金丹妙诀；和尚说，这部书是禅心法门；秀才说，这部书是一部正心诚意的理学书。”如果在阅读这本书的时候，采用一个心理学的视角，用一种精神分析的角度来读这本书，我们就可以看到，这是一本关于一个人自我成长和人格完善的书，他展现了一个英雄人物——孙悟空成长的心路历程。<br><img src="http://www.xlxcn.net/wp-content/uploads/2014/02/12582699382_107_thumb.jpg" alt=""></p>
<h3 id="孙悟空人格特点与成长阶段">孙悟空人格特点与成长阶段</h3>
<p>孙悟空是《西游记》中最重要也是最特别的一个角色，从其行为表现，我们基本可以对其个性心理特征做出如下的判断：从认知层面上，孙悟空的听觉一般，但视力却有非凡表现，具有火眼金睛，可以看透妖魔鬼怪的画皮。而且，他还具备很强的直觉能力，在西行的过程中常常他最先发现山谷中的妖气，寻常中的不寻常。孙悟空的智力水平是相当高的，其领悟能力、学习能力非一般人所能比拟。这从他在菩提祖师处学艺的经过处便可见一般，因悟空不想学一般的技艺，遭到菩提祖师的斥责，并在其头上打了三戒尺。当周围的弟子们纷纷抱怨其惹恼师父时，悟空却微笑不语，原来他早已领悟师父的真正用意是在三更时分将对他秘密传道。从非智力层面上，孙悟空是个外向乐观的人。面对西行路上的妖魔险阻，有时候连唐僧本人都面露难色，猪八戒更是想分行礼后回高老庄做他的女婿；而孙悟空，敌人的本领越强大，他的敢斗敢闯的精力便越旺盛，面对困难他从不面露难色，处处冲锋陷阵在前。</p>
<p>从人格的整体来看，孙悟空集“兽性、人性、神性”于一身。他是一只猴子，具有猴子的活波好动、永不安生的特点，但他不是一只普通的猴子；他还具有人所具有的爱憎分明、喜怒哀乐；但他也不是一个简单的人，他还是一个能力非凡、降妖除魔的神仙。弗洛伊德认为，人格的基本结构可分为“本我（id）、自我（ego）和超我（superego）”三个部分，其中本我是人的动物性，是人所有精神活动能量的储存库；自我是人格中理智的、符合现实的部分，它派生于本我，不能脱离本我而单独存在，自我是本我的执行机构。但人在现实中也不能完全按其动物属性来行事，所以自我也需要超我来调节。超我是人格中最文明、最有道德的部分，它是社会道德的化身，按照道德原则来行事。孙悟空身上所具有的“兽性、人性和神性”和弗洛伊德将人格分为“本我、自我和超我”是暗合的。孙悟空身上的兽性，是他的自然本性，在这一部分，他所追求的是不受约束、任情随欲，谁束缚他，他便反抗谁，这相等于其人格的本我部分。孙悟空身上的人性则相当于自我部分，他受本我的驱使，但又受到现实的约束。在成长的过程中，神通广大的孙悟空也也常常对流露出自己的花果山美猴王生活的向往，这说明孙悟空现实生活中的言行，许多还不是随心所欲的，多半是本我与现实妥协的结果。孙悟空的神性在表明他超凡的能力之外，也预示着其能力的发挥不在是率性而为，是有一定道德原则的要求，否则，就是“妖”而非“神”了。这便与超我相吻合。在孙悟空的心中，虽然充满了反抗精神，但他也希望自己的行为符合道德的要求，符合“神”而不是“妖”的要求。若不然，在初入师门，和唐僧闹翻之后，仅仅东海龙王的几句劝说“……你若不保唐僧，不尽勤劳，不受教诲，到底是个妖仙，休想得成正果”，悟空便沉默不语，翻然悔悟了。可见，孙悟空还是一个有理想，希望自己的言行符合神而非妖的要求，符合道德原则的指引。</p>
<p>从孙悟空的成长经历来看，他的人格成长主要经历了两个阶段。第一个阶段从石猴出世始，到大闹天空、被压五行山下止。这个阶段相当于孙悟空人格成长的童年阶段，在这一阶段中，孙悟空的行为基本上是受本我的冲动控制为多，弗洛伊德认为本我的唯一目标是追求快乐，它向一个暴躁的婴儿，非常贪婪而不开化，只对自己的需要感兴趣。在这个期间，孙悟空凭借自己的天赋异秉，一出世便称王，要过一种“不伏麒麟辖，不伏凤凰管，又不伏人间王位所约束，自由自在”的生活，孙悟空的生本能使他大闹地府，勾去生死簿中的姓名而获得长生；他的死本能又让他大闹天空，破坏掉天庭的建筑和秩序。但人如果仅仅按照自己原始的生命本能来行事的话，必然被现有的社会秩序所不容。现实与本我的需求不可能完全一致，本我的需求不可能在现实面前完全满足，孙悟空在试图满足本我需要的道路上也遭到了挫折，在大闹天空之后被压五行山下。</p>
<p>自从拜唐僧为师，踏上漫漫取经之路起，孙悟空的人格发展进入了第二个阶段。在这个阶段中，虽然也受本我欲望的驱使，但更多的时候他自我的的言行要受到超我的影响。他的神性而非妖性得到了增强，虽然他身上猴子的性情也不段涌现，但在大方向上，他的主要行为还是按照现实社会的要求而进行的。在这个期间，他的死本能——破坏的冲动也在不断调整和升华。刚刚拜师的时候，他可以无原则地棒杀几个毛贼来获取几个盘缠，但是，随着取经路程的演进，在“保卫唐僧西行，最终修得正果”信念指引下，他的金箍棒，更多地打向那些要吃唐僧肉的妖魔鬼怪，他的破坏能量也更具有建设性。他的神通广大没有变，他的本我冲动没有变，但本我的力量已经升华为降妖除魔，而不是肆意妄为。虽然有时他也不免发出“成人不自在、自在不成人”的感叹，这就如一个人常怀念童年，但却不能回到童年一样。孙悟空放弃了自己的一些童年时代的美猴王之梦，而不畏艰难险阻随师父西行，他的自我也因此得以发展，人格得以完善，成为一个人人敬仰的英雄。</p>
<h3 id="金箍棒、紧箍咒的心理象征意义">金箍棒、紧箍咒的心理象征意义</h3>
<p>金箍棒是孙悟空在龙宫里得到的一件宝贝，是东海里的定海神针，可随人意粗细长短，名为“如意金箍棒”。在得到这个宝物之后，孙悟空闲时就把他放在耳内，用时掏出成为自己的武器，不论是大闹天空，还是取经路上降妖除魔，金箍棒须臾不离自己。《西游记》的作者吴承恩将孙悟空的这个宝贝命名为“如意金箍棒”，是无意也好，有意也吧，按弗洛伊德的精神分析的观点，金箍棒的心理象征意义是很明显的，它是男根的象征，是孙悟空心理能量的源泉，也是齐天大圣里比多（libido）的所在。</p>
<p>根据弗洛伊德的观点，本我是人格中最难接近、但又是最有力的部分。说它难接近是因为它潜藏在无意识之中；说它最有力，因为它是人所有精神活动所需要能量的储存库。而本我中所储存的精神能量，即为里比多，它是人心理行为背后的真正动因。而金箍棒，作为自然本性——情欲的象征，正是靠着它，孙悟空才得以大闹龙宫地府，大败天兵天将，后来又横扫西天妖魔的。然而，人的里比多随意发泄必然为社会所不容，正如孙悟空的金箍棒不能不分青红皂白随意驱使，孙悟空也正是因此被压五行山下，让其进行五百年的自我悔过。</p>
<p>但是，如果人的里比多得不到释放的话，人便会产生焦虑和压抑，而长期压抑的结果会导致心理的扭曲。作为孙悟空而言，无疑具有极端好动、用不安生的个性特点，他的心理能量也需要有个释放的途径，仅仅压抑起来行不通的。弗洛伊德认为人的心理能量所导致的焦虑可以通过心理防御机制来得到化解和疏导。人主要的心理防御机制包括压抑、投射、转移、否认、升华等方式。在五百年的炼狱之后，孙悟空皈依了佛祖，成了取经和尚唐僧的徒弟。但是，这并不表明他的情欲的消亡，而是以一种升华的形式表现了出来，升华是指原来用以满足本能的活动为更高的文化目的所取代，表现为一种对文明事业的追求。在取经途中，孙悟空金箍棒的不在任意所为，而是直接指向了为祸人间、阻碍取经大业的破坏分子。他也因为自己的情欲的升华，最终修成了成果，获得了斗战胜佛的称号。</p>
<p>与金箍棒同时不离孙悟空左右的，是他头上的金箍儿，它随时受唐僧紧箍咒的差遣，给孙悟空带来的无穷的烦恼。孙悟空的头上的金箍儿，令人联想到行为主义心理治疗中的厌恶疗法，典型的厌恶疗法是患者手臂上套一个橡皮圈，如果患者的心理症状出现时，如强迫自己数数，便拉动橡皮圈，使自己疼痛，进而分心和惩罚自己，以此来控制自己心理症状的再生。孙悟空的金箍儿没有这样简单，除了它是紧箍咒的载体，而且在心理意义上，则是社会道德规范的象征，是孙悟空人格上超我的代表。</p>
<p>如前所言，超我是社会道德的化身，按照“道德原则”行事，它总是与享乐主义的本我直接发生对立和冲突，使它得不到满足。在《西游记》中，常常出现的情节是，孙悟空拿出代表本我的金箍棒，准备痛痛快快大干一场的时候，师父的紧箍咒想起，缩紧的金箍儿使得孙悟空痛苦不堪。从心理学的意义上说，这一场景生动地表现了孙悟空人格上的自我在本我和超我之间的挣扎，这种冲突在前面节选的《西游记》片断——“三打白骨精”的情节中得到了集中的展现。按本我的意愿行事，抛弃超我的奴役，这是许多人的梦想，孙悟空也时时刻刻想把这个金箍儿拿走，他到西天后的第一个愿望也是：“趁早儿念个松箍儿咒，脱下来。打的粉碎，切莫教那甚么菩萨再去捉弄他人”，可见孙悟空对其是憎恶之深。然而，正如随着西行的脚步，唐僧运用紧箍咒的次数也越来越少一样，孙悟空的行为也越来越遵从当时的社会规范，他的原来受许多受外在的紧箍咒控制的行为也逐渐成为一种自觉了。当西天取经事成，悟空要求师父去掉金箍儿之时，他头上的金箍儿已经自然消失，而他却浑然不觉。这也表明，社会道德规范对他的要求已经从他律到达了一种自律。孙悟空已经成熟为一个社会认可的英雄人物，不管他自己愿意不愿意。</p>
<h3 id="唐僧和观音对孙悟空成长的影响">唐僧和观音对孙悟空成长的影响</h3>
<p>按照《西游记》书中的交代，孙悟空是一个天生的石猴成精；唐僧是金蝉子转世成为取经人；而观音则是西天的灵山的菩萨。这三者在书中的关系很清楚，观音是西天取经的发起者和召集人，唐僧是取经路线的忠实执行者，而孙悟空则是保护唐僧取经的大徒弟。然而，对孙悟空的人格成长而言，唐僧和观音的影响却不是这样简单。</p>
<p>就唐僧而言，孙悟空的人格特点和他是格格不入，按理，孙悟空也不会喜欢唐僧的个性。在书中，孙悟空对唐僧的不满和反抗也是常常发生，他们似乎是天生的敌人，心理上斗争和冲突不断出现。在唐僧对他唠唠叨叨莫要杀生之际，他也常常嘲笑唐僧肉眼凡胎，不识别真假，这种冲突在三打白骨精中也得到具体的体现。孙悟空对唐僧的教诲充满了反抗，但在反抗中又常常不得不妥协，在这种矛盾的振荡中，孙悟空的人格也在逐步走向成熟。从心理意义上讲，孙悟空和唐僧的关系不仅仅是师徒，更象是父子。当刚刚成为唐僧的徒弟，师父哄骗着将金箍套在孙悟空的头顶时，这具有一个极强的心理象征意义，那就是将是将孙悟空置于社会道德的规范之下。虽然孙悟空明显感到了这种规范对自身自由的束缚，就象一个孩子被父亲告诫从今之后什么是不能做的，什么是社会所不允许的，他感觉到了不自在，但是，为了成长，他又不得不接受这一切。在刚刚接受社会道德的规范的日子里，个体是不愉快的，正如刚刚戴上了金箍的孙悟空。但是，当个体已经接受这种规范，并使这种成为自身行动的准则时，他又会感激给他带来这种规范的人。就象孙悟空和唐僧的关系，是在冲突中开始，但当到了孙悟空成佛的那一刻时，彼此的关系已经是亲密无间的了，这与我们和我们父亲的关系是何其相似。</p>
<p><img src="http://www.xlxcn.net/wp-content/uploads/2014/02/P200608300845581559829053_thumb.jpg" alt=""></p>
<p>观音菩萨也是孙悟空成长过程中的重要人物，可以说她对孙悟空的影响在某种程度上超越了唐僧。是她，在孙悟空大闹天空时推荐了二郎神将其抓获；也是她，在看到孙悟空被压五行山下时而不住叹息；又是她，在唐僧西天取经时，给了悟空一个赎罪和展示才能的机会；还是她，在取经路上帮助孙悟空度过了一个一个难关，最终使其位列仙班。从《西游记》一书中不难看出，对孙悟空的成长最关心的是观世音，对孙悟空成长帮助最大的也是观世音。在这里，观音菩萨不象一个清心寡欲的神仙，更象一个关心孩子成长的母亲。孙悟空在取经路上对观音的依赖感也不仅仅行动上的，更是心理上的。例如，在《西游记》第五十七回中，孙悟空取经路上又遭挫折，便去寻找观音菩萨，“行者望见菩萨，倒身下拜，止不住泪如泉涌，放声大哭。菩萨教木叉与善财扶起道：“悟空，有甚伤感之事，明明说来，莫哭，莫哭，我与你救苦消灾也””。从如此的对话中，我们感受不到大闹天空美猴王的风采，这更象是一个受了委屈的孩子在向母亲哭诉的场景。曾听人说观音和悟空的关系象情人，其实不然，他们应该是更象母子。</p>
<p>最后说一句多余的话，虽然从心理层面上讲，唐僧和悟空的关系象父子，观音和悟空的关系象母子，但是作者并不想说他们的关系象一家人。确实，把唐僧和观音的关系比照为夫妻，那是有乱点鸳鸯谱之嫌的。</p>
<p><em>本文转载于<a href="http://www.xlxcn.net/archives/2867" target="_blank">世纪心理沙龙</a></em></p>
]]></content>
    
    
      <category term="心里学" scheme="http://www.haozi520.com/tags/%E5%BF%83%E9%87%8C%E5%AD%A6/"/>
    
      <category term="西游记" scheme="http://www.haozi520.com/tags/%E8%A5%BF%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="有文化" scheme="http://www.haozi520.com/categories/%E6%9C%89%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux grep命令详解]]></title>
    <link href="http://www.haozi520.com/2014/06/07/linux%20grep%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.haozi520.com/2014/06/07/linux grep命令详解/</id>
    <published>2014-06-07T08:32:12.000Z</published>
    <updated>2014-06-07T09:10:21.000Z</updated>
    <content type="html"><![CDATA[<p>grep (global search regular expression(RE) and print out the line,全面搜索正则表达式并把行打印出来)是一种强大的文本搜索工具，<br>它能使用正则表达式搜索文本，并把匹配的行打印出来。<br>Unix的grep家族包括grep、egrep和fgrep。egrep和fgrep的命令只跟grep有很小不同。egrep是grep的扩展，支持更多的re元字符， fgrep就是fixed grep或fast grep，它们把所有的字母都看作单词，也就是说，正则表达式中的元字符表示回其自身的字面意义，不再特殊。linux使用GNU版本的grep。它功能更强，可以通过-G、-E、-F命令行选项来使用egrep和fgrep的功能。</p>
<h3 id="grep常用用法">grep常用用法</h3>
<p><strong>grep [-acinv] [—color=auto] ‘搜寻字符串’ filename</strong></p>
<pre><code>选项与参数：
-<span class="ruby">a ：将 binary 文件以 text 文件的方式搜寻数据
</span>-<span class="ruby">c ：计算找到 <span class="string">'搜寻字符串'</span> 的次数
</span>-<span class="ruby">i ：忽略大小写的不同，所以大小写视为相同
</span>-<span class="ruby">n ：顺便输出行号
</span>-<span class="ruby">v ：反向选择，亦即显示出没有 <span class="string">'搜寻字符串'</span> 内容的那一行！
</span>-<span class="ruby">-color=auto ：可以将找到的关键词部分加上颜色的显示喔！</span>
</code></pre><p>以操作/etc/passwd文件来说明：</p>
<pre><code>将/etc/passwd，有出现 root 的行取出来
   <span class="keyword">grep</span> root /etc/passwd
将/etc/passwd，有出现 root 的行取出来,同时显示这些行在/etc/passwd的行号
   <span class="keyword">grep</span> -n root /etc/passwd
将/etc/passwd，将没有出现 root 的行取出来
   <span class="keyword">grep</span> -v root /etc/passwd 
将/etc/passwd，将没有出现 root 和nologin的行取出来
   <span class="keyword">grep</span> -v root /etc/passwd | <span class="keyword">grep</span> -v nologin 
用 dmesg 列出核心信息，再以 <span class="keyword">grep</span> 找出内含 eth 那行,要将捉到的关键字显色，且加上行号来表示
   dmesg | <span class="keyword">grep</span> -n --color=auto <span class="string">'eth'</span>
用 dmesg 列出核心信息，再以 <span class="keyword">grep</span> 找出内含 eth 那行,在关键字所在行的前两行与后三行也一起捉出来显示
   dmesg | <span class="keyword">grep</span> -n -A3 -B2 --color=auto <span class="string">'eth'</span> 
</code></pre><blockquote>
<p>在关键字的显示方面，grep 可以使用 —color=auto 来将关键字部分使用颜色显示。 这可是个很不错的功能啊！但是如果每次使用 grep 都得要自行加上 —color=auto 又显的很麻烦～ 此时那个好用的 alias 就得来处理一下啦！你可以在 ~/.bashrc 内加上这行：『alias grep=’grep —color=auto’』再以『 source ~/.bashrc 』来立即生效即可喔！ 这样每次运行 grep 他都会自动帮你加上颜色显示啦</p>
</blockquote>
<h3 id="根据文件内容递归查找目录">根据文件内容递归查找目录</h3>
<pre><code><span class="keyword">grep</span> ‘energywise’ *           <span class="comment">#在当前目录搜索带'energywise'行的文件</span>
<span class="keyword">grep</span> -r ‘energywise’ *        <span class="comment">#在当前目录及其子目录下搜索'energywise'行的文件</span>
<span class="keyword">grep</span> -l -r ‘energywise’ *     <span class="comment">#在当前目录及其子目录下搜索'energywise'行的文件，但是不显示匹配的行，只显示匹配的文件</span>
</code></pre><p>这几个命令很使用，是查找文件的利器。</p>
<h3 id="grep与正规表达式">grep与正规表达式</h3>
<p><strong>字符类</strong><br>字符类的搜索：如果我想要搜寻 test 或 taste 这两个单字时，可以发现到，<br>其实她们有共通的 ‘t?st’ 存在～这个时候，我可以这样来搜寻</p>
<pre><code>grep -n <span class="string">'t[ae]st'</span> regular_express.txt
<span class="number">8</span><span class="symbol">:I</span> can<span class="string">'t finish the test.
9:Oh! The soup taste good.</span>
</code></pre><p>其实 [] 里面不论有几个字节，他都谨代表某『一个』字节， 所以，上面的例子说明了，<br>我需要的字串是『tast』或『test』两个字串而已！</p>
<p>字符类的反向选择 [^] ：如果想要搜索到有 oo 的行，但不想要 oo 前面有 g，如下</p>
<pre><code>[root<span class="variable">@www</span> ~]<span class="comment"># grep -n '[^g]oo' regular_express.txt</span>
<span class="number">2</span><span class="symbol">:apple</span> is my favorite food.
<span class="number">3</span><span class="symbol">:Football</span> game is <span class="keyword">not</span> use feet only.
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><p>第 2,3 行没有疑问，因为 foo 与 Foo 均可被接受！<br>但是第 18 行明明有 google 的 goo 啊～别忘记了，因为该行后面出现了 tool 的 too 啊！所以该行也被列出来～ 也就是说， 18 行里面虽然出现了我们所不要的项目 (goo) 但是由於有需要的项目 (too) ， 因此，是符合字串搜寻的喔！<br>至於第 19 行，同样的，因为 goooooogle 里面的 oo 前面可能是 o ，例如： go(ooo)oogle ，所以，这一行也是符合需求的！</p>
<p>字符类的连续：再来，假设我 oo 前面不想要有小写字节，所以，我可以这样写 [^abcd….z]oo ， 但是这样似乎不怎么方便，由於小写字节的 ASCII 上编码的顺序是连续的， 因此，我们可以将之简化为底下这样：</p>
<pre><code>[root<span class="variable">@www</span> ~]<span class="comment"># grep -n '[^a-z]oo' regular_express.txt</span>
<span class="number">3</span><span class="symbol">:Football</span> game is <span class="keyword">not</span> use feet only.
</code></pre><p>也就是说，当我们在一组集合字节中，如果该字节组是连续的，例如大写英文/小写英文/数字等等， 就可以使用[a-z],[A-Z],[0-9]等方式来书写，那么如果我们的要求字串是数<br>字与英文呢？ 呵呵！就将他全部写在一起，变成：[a-zA-Z0-9]。我们要取得有数字的那<br>一行，就这样：</p>
<pre><code>[root<span class="property">@www</span> ~]<span class="comment"># grep -n '[0-9]' regular_express.txt</span>
<span class="number">5</span>:However, <span class="keyword">this</span> dress <span class="keyword">is</span> about $ <span class="number">3183</span> dollars.
<span class="number">15</span>:You are the best <span class="keyword">is</span> mean you are the <span class="literal">no</span>. <span class="number">1.</span>
</code></pre><p>行首与行尾字节 ^ $<br>行首字符：如果我想要让 the 只在行首列出呢？ 这个时候就得要使用定位字节了！我们可以这样做：</p>
<pre><code>[root@www ~]<span class="preprocessor"># grep -n '^the' regular_express.txt</span>
<span class="number">12</span>:the symbol <span class="string">'*'</span> <span class="keyword">is</span> represented <span class="keyword">as</span> start.
</code></pre><p>此时，就只剩下第 12 行，因为只有第 12 行的行首是 the 开头啊～此外， 如果我想要开头是小写字节的那一行就列出呢？可以这样：</p>
<pre><code>[root@www ~]<span class="comment"># grep -n '^[a-z]' regular_express.txt</span>
<span class="number">2</span>:apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
<span class="number">4</span>:this dress doesn't fit <span class="keyword">me</span>.
<span class="number">10</span>:motorcycle <span class="keyword">is</span> cheap than car.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span>:goooooogle yes!
<span class="number">20</span>:go! go! Let's go.
</code></pre><p>如果我不想要开头是英文字母，则可以是这样：</p>
<pre><code>[root@www ~]<span class="preprocessor"># grep -n '^[^a-zA-Z]' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">21</span>:<span class="preprocessor"># I am VBird</span>
</code></pre><p>^ 符号，在字符类符号(括号[])之内与之外是不同的！ 在 [] 内代表『反向选择』，在 [] 之外则代表定位在行首的意义！</p>
<p>那如果我想要找出来，行尾结束为小数点 (.) 的那一行：</p>
<pre><code>[root@www ~]<span class="comment"># grep -n '\.$' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">2</span>:apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
<span class="number">3</span>:Football game <span class="keyword">is</span> <span class="keyword">not</span> use feet only.
<span class="number">4</span>:this dress doesn't fit <span class="keyword">me</span>.
<span class="number">10</span>:motorcycle <span class="keyword">is</span> cheap than car.
<span class="number">11</span>:This window <span class="keyword">is</span> clear.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">15</span>:You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
<span class="number">16</span>:The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
<span class="number">17</span>:I like dog.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
<span class="number">20</span>:go! go! Let's go.
</code></pre><p><em>特别注意到，因为小数点具有其他意义(底下会介绍)，所以必须要使用转义字符()来加以解除其特殊意义！</em></p>
<p>找出空白行：</p>
<pre><code>[root<span class="variable">@www</span> ~]<span class="comment"># grep -n '^$' regular_express.txt</span>
<span class="number">22</span><span class="symbol">:</span>
</code></pre><p>因为只有行首跟行尾 (^$)，所以，这样就可以找出空白行啦！</p>
<p>任意一个字节 . 与重复字节 *<br>这两个符号在正则表达式的意义如下：</p>
<pre><code>-<span class="ruby"> . (小数点)：代表『一定有一个任意字节』的意思；
</span>-<span class="ruby"> * (星号)：代表『重复前一个字符， <span class="number">0</span> 到无穷多次』的意思，为组合形态</span>
</code></pre><p>假设我需要找出 g??d 的字串，亦即共有四个字节， 起头是 g 而结束是 d ，我可以这样做：</p>
<pre><code>[root@www ~]<span class="comment"># grep -n 'g..d' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">9</span>:Oh! The soup taste good.
<span class="number">16</span>:The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
</code></pre><p>因为强调 g 与 d 之间一定要存在两个字节，因此，第 13 行的 god 与第 14 行的 gd 就不会被列出来啦！</p>
<p>如果我想要列出有 oo, ooo, oooo 等等的数据， 也就是说，至少要有两个(含) o 以上，该如何是好？</p>
<p>因为 <em> 代表的是『重复 0 个或多个前面的 RE 字符』的意义， 因此，『o</em>』代表的是：『拥有空字节或一个 o 以上的字节』，因此，『 grep -n ‘o*’ regular_express.txt 』将会把所有的数据都列印出来终端上！</p>
<p>当我们需要『至少两个 o 以上的字串』时，就需要 ooo* ，亦即是：</p>
<pre><code>[root@www ~]<span class="comment"># grep -n 'ooo*' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">2</span>:apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
<span class="number">3</span>:Football game <span class="keyword">is</span> <span class="keyword">not</span> use feet only.
<span class="number">9</span>:Oh! The soup taste good.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span>:goooooogle yes!
</code></pre><p>如果我想要字串开头与结尾都是 g，但是两个 g 之间仅能存在至少一个 o ，亦即是 gog, goog, gooog…. 等等，那该如何？</p>
<pre><code>[root<span class="variable">@www</span> ~]<span class="comment"># grep -n 'goo*g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><p>如果我想要找出 g 开头与 g 结尾的行，当中的字符可有可无</p>
<pre><code>[root@www ~]<span class="preprocessor"># grep -n 'g.*g' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">14</span>:The gd software <span class="keyword">is</span> a library <span class="keyword">for</span> drafting programs.
<span class="number">18</span>:google <span class="keyword">is</span> the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span>:goooooogle yes!
<span class="number">20</span>:go! go! <span class="keyword">Let</span><span class="comment">'s go.</span>
</code></pre><p>因为是代表 g 开头与 g 结尾，中间任意字节均可接受，所以，第 1, 14, 20 行是可接受的喔！ 这个 .* 的 RE 表示任意字符是很常见的.</p>
<p>如果我想要找出『任意数字』的行？因为仅有数字，所以就成为：</p>
<pre><code>[<span class="link_label">root@www ~</span>]# grep -n '[<span class="link_label">0-9</span>][<span class="link_reference">0-9</span>]*' regular_express.txt
5:However, this dress is about $ 3183 dollars.
15:You are the best is mean you are the no. 1.
</code></pre><p>限定连续 RE 字符范围 {}<br>我们可以利用 . 与 RE 字符及 * 来配置 0 个到无限多个重复字节， 那如果我想要限制一个范围区间内的重复字节数呢？</p>
<p>举例来说，我想要找出两个到五个 o 的连续字串，该如何作？这时候就得要使用到限定范围的字符 {} 了。 但因为 { 与 } 的符号在 shell 是有特殊意义的，因此， 我们必须要使用字符   \ 来让他失去特殊意义才行。 至於 {} 的语法是这样的，假设我要找到两个 o 的字串，可以是：</p>
<pre><code>[root@www ~]<span class="comment"># grep -n 'o\{2\}' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">2</span>:apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
<span class="number">3</span>:Football game <span class="keyword">is</span> <span class="keyword">not</span> use feet only.
<span class="number">9</span>:Oh! The soup taste good.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search ke
<span class="number">19</span>:goooooogle yes!
</code></pre><p>假设我们要找出 g 后面接 2 到 5 个 o ，然后再接一个 g 的字串，他会是这样：</p>
<pre><code>[root<span class="variable">@www</span> ~]<span class="comment"># grep -n 'go\{2,5\}g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
</code></pre><p>如果我想要的是 2 个 o 以上的 goooo….g 呢？除了可以是 gooo*g ，也可以是：</p>
<pre><code>[root<span class="variable">@www</span> ~]<span class="comment"># grep -n 'go\{2,\}g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><h3 id="扩展grep(grep_-E_或者_egrep)：">扩展grep(grep -E 或者 egrep)：</h3>
<p>使用扩展grep的主要好处是增加了额外的正则表达式元字符集。</p>
<p>打印所有包含NW或EA的行。如果不是使用egrep，而是grep，将不会有结果查出。</p>
<pre><code><span class="array"># egrep </span><span class="string">'NW|EA'</span> testfile     
northwest       NW      Charles Main        <span class="number">3.0</span>     <span class="number">.98</span>     <span class="number">3</span>       <span class="number">34</span>
eastern         EA      TB Savage           <span class="number">4.4</span>     <span class="number">.84</span>     <span class="number">5</span>       <span class="number">20</span>
</code></pre><p>对于标准grep，如果在扩展元字符前面加\，grep会自动启用扩展选项-E。</p>
<pre><code><span class="array">#grep </span><span class="string">'NW\|EA'</span> testfile
northwest       NW      Charles Main        <span class="number">3.0</span>     <span class="number">.98</span>     <span class="number">3</span>       <span class="number">34</span>
eastern         EA      TB Savage           <span class="number">4.4</span>     <span class="number">.84</span>     <span class="number">5</span>       <span class="number">20</span>
</code></pre><p>搜索所有包含一个或多个3的行。</p>
<pre><code><span class="preprocessor"># egrep '3+' testfile</span>
<span class="preprocessor"># grep -E '3+' testfile</span>
<span class="preprocessor"># grep '3\+' testfile        </span>
<span class="preprocessor">#这3条命令将会</span>
northwest      <span class="constant"> NW </span>     Charles Main          <span class="number">3.0</span>     <span class="number">.98</span>     <span class="number">3</span>       <span class="number">34</span>
western        <span class="constant"> WE </span>     Sharon Gray           <span class="number">5.3</span>     <span class="number">.97</span>     <span class="number">5</span>       <span class="number">23</span>
northeast      <span class="constant"> NE </span>    <span class="constant"> AM </span>Main Jr.           <span class="number">5.1</span>     <span class="number">.94</span>     <span class="number">3</span>       <span class="number">13</span>
central        <span class="constant"> CT </span>     Ann Stephens          <span class="number">5.7</span>     <span class="number">.94</span>     <span class="number">5</span>       <span class="number">13</span>
</code></pre><p>搜索所有包含0个或1个小数点字符的行。</p>
<pre><code><span class="preprocessor"># egrep '2\.?[0-9]' testfile </span>
<span class="preprocessor"># grep -E '2\.?[0-9]' testfile</span>
<span class="preprocessor"># grep '2\.\?[0-9]' testfile </span>
<span class="preprocessor">#首先含有2字符，其后紧跟着0个或1个点，后面再是0和9之间的数字。</span>
western        <span class="constant"> WE </span>      Sharon Gray          <span class="number">5.3</span>     <span class="number">.97</span>     <span class="number">5</span>       <span class="number">23</span>
southwest      <span class="constant"> SW </span>     Lewis Dalsass         <span class="number">2.7</span>     <span class="number">.8</span>      <span class="number">2</span>       <span class="number">18</span>
eastern        <span class="constant"> EA </span>     <span class="constant"> TB </span>Savage            <span class="number">4.4</span>     <span class="number">.84</span>     <span class="number">5</span>       <span class="number">20</span>
</code></pre><p>搜索一个或者多个连续的no的行。</p>
<pre><code><span class="array"># egrep </span><span class="string">'(no)+'</span> testfile
<span class="array"># grep </span>-E <span class="string">'(no)+'</span> testfile
<span class="array"># grep </span><span class="string">'\(no\)\+'</span> testfile   #<span class="number">3</span>个命令返回相同结果，
northwest       NW      Charles Main        <span class="number">3.0</span>     <span class="number">.98</span>     <span class="number">3</span>       <span class="number">34</span>
northeast       NE       AM Main Jr.        <span class="number">5.1</span>     <span class="number">.94</span>     <span class="number">3</span>       <span class="number">13</span>
north           NO      Margot Weber        <span class="number">4.5</span>     <span class="number">.89</span>     <span class="number">5</span>       <span class="number">9</span>
</code></pre><h3 id="不使用正则表达式">不使用正则表达式</h3>
<p><strong>fgrep</strong><br>查询速度比grep命令快，但是不够灵活：它只能找固定的文本，而不是规则表达式。<br>如果你想在一个文件或者输出中找到包含星号字符的行</p>
<pre><code>fgrep  <span class="string">'*'</span> /etc/profile
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="regexp">/etc/profile.d/</span>*.sh ; <span class="keyword">do</span>
</code></pre><p>或</p>
<pre><code>grep -F <span class="string">'*'</span> /etc/profile
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="regexp">/etc/profile.d/</span>*.sh ; <span class="keyword">do</span>
</code></pre>]]></content>
    
    
      <category term="linux" scheme="http://www.haozi520.com/tags/linux/"/>
    
      <category term="grep" scheme="http://www.haozi520.com/tags/grep/"/>
    
      <category term="linux" scheme="http://www.haozi520.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[高考心理学：如何应对焦虑情绪？]]></title>
    <link href="http://www.haozi520.com/2014/06/07/%E9%AB%98%E8%80%83%E5%BF%83%E7%90%86%E5%AD%A6%EF%BC%9A%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E7%84%A6%E8%99%91%E6%83%85%E7%BB%AA/"/>
    <id>http://www.haozi520.com/2014/06/07/高考心理学：如何应对焦虑情绪/</id>
    <published>2014-06-07T08:06:12.000Z</published>
    <updated>2014-06-10T04:14:11.000Z</updated>
    <content type="html"><![CDATA[<p><strong>本文转载自迟毓凯博士主持的非营利性心理学网站：<a href="http://www.xlxcn.net/" target="_blank">世纪心理沙龙</a></strong></p>
<p>考试前后情绪的变化，也是备考的重要内容。考试焦虑问题，许多考生都或多或少有一些。那么，考试之前太紧张了怎么办？缓解压力主要有以下几种办法：</p>
<h3 id="运动法">运动法</h3>
<p>如果这一个月内你比较焦躁，今天学习学不进去了怎么办？课间的时候做点运动。你们会发现，考试让人焦虑、紧张，但是跑步、冲凉的时候人的心理上肯定不会紧张。因此，在觉得自己处于焦虑紧张状态时，让自己运动起来。通过运动，可以将身体上的放松转变为精神上的放松。</p>
<p>现代社会，抑郁已经成为一个流行词汇，但运动员很少抑郁，因为运动可以促进大脑分泌一种叫做多巴胺的物质，而这正是快乐的生化基础。一些研究表明，经常处于焦虑和抑郁状态的人大多是那些不爱运动，愿意思考，有着悲观思想的人。考前考生每天坐在教室中，一心只想着学习、考试，不与别人交流，也不愿意出去运动，自然容易抑郁和焦虑。因此，如果考前感觉到比较焦虑的话，就可以出去运动一下，转换一下心境会比较好。</p>
<h3 id="音乐法">音乐法</h3>
<p>喜欢音乐的同学可以听一点音乐。哼一哼歌曲。如果紧张的话你会发现唱歌都会跑调，而把一个歌曲哼得比较平稳了，就不再焦虑了——所以说，听音乐或者唱歌都是缓解焦虑的好办法。但需要提醒大家的是，不要半夜起来觉得自己焦虑，睡不着觉就唱起来了。排解自己的不良心态应该以不损人利己为前提。</p>
<h3 id="想像法">想像法</h3>
<p>利用一些想像力，常给自己一些强的、好的暗示。例如有的人长得很漂亮，但她觉得自己并不漂亮；有的人长相一般，但是自我感觉良好；显然，后者的心情会更加舒畅，而随着时间的推移，后者越来越漂亮也是很有可能的。同样的道理，如果考生能把自己想得很强大，考试的时候自然不会焦虑。而如果整天前怕狼后怕虎，考试时总想着这不行那不行的话，最后可能会真的不行了。在心理学上，这叫做自我实现的预言效应，也就是说，自己对自己的预言往往就成为现实。</p>
<p>我对大学毕业生能力的判断比较准确，我认为不适合考研究生的学生往往以考不上告终。但这其中总有个别学生不管别人的看法，就觉得自己能力不错，通过自己的努力真考上研究生了，并且各方面的成就都不错。而相反那些自己觉得自己不行的，往往就真考不上。所以有的时候并不是你的智力、你的知识达到什么水平使你达到一个什么成就，而是你对自己的一个看法，有没有一个强的自我暗示，所以我们要对自己鼓一下气！</p>
<h3 id="深呼吸">深呼吸</h3>
<p>我们平时都会有一个体会，当一个人心情平稳的时候，往往身体也是放松的，反之，当一个人身体放松的时候，心情也往往是平稳的。所以，为了缓解自己的焦虑紧张心情，完全可以通过生理上的放松而实现，而深呼吸，恰恰是一个放松身心的好办法。</p>
<p>深呼吸具体怎么做？采用鼻子呼吸，腹部吸气。双肩自然下垂，慢慢闭上双眼，然后慢慢地深深地吸气，吸到足够多时，憋气2秒钟，再把吸进去的气缓缓地呼出。自己要配合呼吸的节奏给予一些暗示和指导语：“吸……呼……吸……呼……”，呼气的时候尽量告诉自己我现在很放松很舒服，注意感觉自己的呼气、吸气，体会“深深地吸进来，慢慢地呼出去”的感觉。重复做这样的呼吸20遍，每天两次。</p>
<p>深呼吸虽然很简单，但常常能起到一定的作用。在遇到紧张的场合或是手足无措不知道自己该怎么办的时候，不妨先做一次深呼吸放松。</p>
<h3 id="焦虑调节注意事项">焦虑调节注意事项</h3>
<p>备考时，情绪调节还有一些方面值得注意：</p>
<p><strong>1. 不要放在考前才做调节</strong></p>
<p>情绪调整应该是生活中经常要做的事，不要在考试之前才想到用一些方法来缓解自己的情绪。不要以为某种调整情绪的方式——例如深呼吸法——我已经知道了，现在用不到，也不用练，到考试之前练练就行了。焦虑的处理是需要一定的预先准备的，如果情绪调整方法不熟练的话，自己并不能因此放松下来，所以同学们平时要做好这方面的练习。</p>
<p><strong>2. 不要临时用新学会的方法</strong></p>
<p>不要在临上考场前或者在考场上临时用最新学会的情绪调节方法。有同学说：“平时我没注意，到考试前几天我紧张，我就报了一个班，通过自我催眠来缓解自我焦虑。”自我催眠的确可以缓解焦虑，但是刚学学会的方法远谈不上熟练运用，在考场上自我催眠，万一失败睡着了，就耽误大事了。考前应该构想出一些情况，在什么情况下会遇见什么样的压力，然后再把应对这些压力的调节手段想好、练熟。不要临时用什么最新的方法，要用最熟练的。</p>
<p><strong>3. 不必刻意追求放松</strong></p>
<p>最后我要强调一下，适当的焦虑是正常的。只要焦虑情绪还不影响正常的复习，就不必刻意调节。考试前后的情绪，也不必刻意追求放松，考试的情绪问题，想多了反倒不好。</p>
]]></content>
    
    
      <category term="心里学" scheme="http://www.haozi520.com/tags/%E5%BF%83%E9%87%8C%E5%AD%A6/"/>
    
      <category term="高考心态" scheme="http://www.haozi520.com/tags/%E9%AB%98%E8%80%83%E5%BF%83%E6%80%81/"/>
    
      <category term="有知识" scheme="http://www.haozi520.com/categories/%E6%9C%89%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
